<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.rongyi.settle.mapper.PaymentStatementMapper">
	<resultMap id="BaseResultMap" type="com.rongyi.easy.settle.entity.PaymentStatement">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="config_id" property="configId" jdbcType="INTEGER" />
		<result column="rule_code" property="ruleCode" jdbcType="VARCHAR" />
		<result column="cycle_start_time" property="cycleStartTime" jdbcType="TIMESTAMP" />
		<result column="cycle_end_time" property="cycleEndTime" jdbcType="TIMESTAMP" />
		<result column="type" property="type" jdbcType="TINYINT" />
		<result column="batch_no" property="batchNo" jdbcType="VARCHAR" />
		<result column="pay_total" property="payTotal" jdbcType="INTEGER" />
		<result column="status" property="status" jdbcType="TINYINT" />
		<result column="pay_time" property="payTime" jdbcType="TIMESTAMP" />
		<result column="pay_no" property="payNo" jdbcType="VARCHAR" />
		<result column="status_update_time" property="statusUpdateTime" jdbcType="TIMESTAMP" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="is_delete" property="isDelete" jdbcType="TINYINT" />
	</resultMap>
	<sql id="Base_Column_List">
		id, config_id, rule_code, cycle_start_time, cycle_end_time,
		`type`,
		batch_no, pay_total,
		`status`, pay_time, pay_no,
		status_update_time, create_at, is_delete
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		from payment_bill
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		payment_bill
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.rongyi.easy.settle.entity.PaymentStatement" useGeneratedKeys="true" keyProperty="id">
		insert into
		payment_bill
		(config_id, rule_code, cycle_start_time,
		cycle_end_time, `type`,
		batch_no,
		pay_total, `status`, pay_time,
		pay_no,
		status_update_time,
		create_at,
		is_delete)
		values (#{configId,jdbcType=INTEGER},
		#{ruleCode,jdbcType=VARCHAR},
		#{cycleStartTime,jdbcType=TIMESTAMP},
		#{cycleEndTime,jdbcType=TIMESTAMP}, #{type,jdbcType=TINYINT},
		#{batchNo,jdbcType=VARCHAR},
		#{payTotal,jdbcType=INTEGER},
		#{status,jdbcType=TINYINT}, #{payTime,jdbcType=TIMESTAMP},
		#{payNo,jdbcType=VARCHAR},
		#{statusUpdateTime,jdbcType=TIMESTAMP},
		#{createAt,jdbcType=TIMESTAMP},
		#{isDelete,jdbcType=TINYINT})
	</insert>
	<insert id="insertSelective" parameterType="com.rongyi.easy.settle.entity.PaymentStatement" useGeneratedKeys="true" keyProperty="id">
		insert into payment_bill
		<trim prefix="(" suffix=")" suffixOverrides=",">
			config_id,
			rule_code,
			cycle_start_time,
			cycle_end_time,
			`type`,
			batch_no,
			pay_total,
			`status`,
			pay_time,
			pay_no,
			status_update_time,
			create_at,
			is_delete,
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{configId,jdbcType=INTEGER},
			#{ruleCode,jdbcType=VARCHAR},
			#{cycleStartTime,jdbcType=TIMESTAMP},
			#{cycleEndTime,jdbcType=TIMESTAMP},
			#{type,jdbcType=TINYINT},
			#{batchNo,jdbcType=VARCHAR},
			#{payTotal,jdbcType=INTEGER},
			#{status,jdbcType=TINYINT},
			#{payTime,jdbcType=TIMESTAMP},
			#{payNo,jdbcType=VARCHAR},
			#{statusUpdateTime,jdbcType=TIMESTAMP},
			#{createAt,jdbcType=TIMESTAMP},
			#{isDelete,jdbcType=TINYINT},
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.rongyi.easy.settle.entity.PaymentStatement">
		update payment_bill
		<set>
			<if test="configId != null">
				config_id = #{configId,jdbcType=INTEGER},
			</if>
			<if test="ruleCode != null">
				rule_code = #{ruleCode,jdbcType=VARCHAR},
			</if>
			<if test="cycleStartTime != null">
				cycle_start_time = #{cycleStartTime,jdbcType=TIMESTAMP},
			</if>
			<if test="cycleEndTime != null">
				cycle_end_time = #{cycleEndTime,jdbcType=TIMESTAMP},
			</if>
			<if test="type != null">
				`type` = #{type,jdbcType=TINYINT},
			</if>
			<if test="batchNo != null">
				batch_no = #{batchNo,jdbcType=VARCHAR},
			</if>
			<if test="payTotal != null">
				pay_total = #{payTotal,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				`status` = #{status,jdbcType=TINYINT},
			</if>
			<if test="payTime != null">
				pay_time = #{payTime,jdbcType=TIMESTAMP},
			</if>
			<if test="payNo != null">
				pay_no = #{payNo,jdbcType=VARCHAR},
			</if>
			<if test="statusUpdateTime != null">
				status_update_time =
				#{statusUpdateTime,jdbcType=TIMESTAMP},
			</if>
			<if test="createAt != null">
				create_at = #{createAt,jdbcType=TIMESTAMP},
			</if>
			<if test="isDelete != null">
				is_delete = #{isDelete,jdbcType=TINYINT},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.rongyi.easy.settle.entity.PaymentStatement">
		update
		payment_bill
		set config_id = #{configId,jdbcType=INTEGER},
		rule_code =
		#{ruleCode,jdbcType=VARCHAR},
		cycle_start_time =
		#{cycleStartTime,jdbcType=TIMESTAMP},
		cycle_end_time =
		#{cycleEndTime,jdbcType=TIMESTAMP},
		`type` = #{type,jdbcType=TINYINT},
		batch_no = #{batchNo,jdbcType=VARCHAR},
		pay_total =
		#{payTotal,jdbcType=INTEGER},
		`status` =
		#{status,jdbcType=TINYINT},
		pay_time = #{payTime,jdbcType=TIMESTAMP},
		pay_no =
		#{payNo,jdbcType=VARCHAR},
		status_update_time =
		#{statusUpdateTime,jdbcType=TIMESTAMP},
		create_at =
		#{createAt,jdbcType=TIMESTAMP},
		is_delete =
		#{isDelete,jdbcType=TINYINT}
		where id =
		#{id,jdbcType=INTEGER}
	</update>

	<resultMap id="DtoResultMap" type="com.rongyi.easy.settle.dto.PaymentStatementDto">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="type" property="type" jdbcType="TINYINT" />
		<result column="batch_no" property="batchNo" jdbcType="VARCHAR" />
		<result column="biz_type" property="bussinessType" jdbcType="TINYINT" />
		<result column="biz_id" property="bussinessId" jdbcType="VARCHAR" />
		<result column="cycle_start_time" property="cycleStartTime" jdbcType="TIMESTAMP" />
		<result column="cycle_end_time" property="cycleEndTime" jdbcType="TIMESTAMP" />
		<result column="biz_name" property="bussinessName" jdbcType="VARCHAR" />
		<result column="pay_channel" property="payChannel" jdbcType="TINYINT" />
		<result column="pay_account" property="payAccount" jdbcType="VARCHAR" />
		<result column="blank_name" property="blankName" jdbcType="VARCHAR" />
		<result column="pay_no" property="payNo" jdbcType="VARCHAR" />
		<result column="pay_name" property="payName" jdbcType="VARCHAR" />
		<result column="pay_total" property="payTotal" jdbcType="INTEGER" />
		<result column="biz_email" property="bussinessEmail" jdbcType="VARCHAR" />
		<result column="status_update_time" property="statusUpdateTime" jdbcType="TIMESTAMP" />
		<result column="status" property="status" jdbcType="TINYINT" />
		<result column="desc" property="desc" jdbcType="VARCHAR" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="download_user" property="downLoadUser" jdbcType="TIMESTAMP" />
		<result column="download_time" property="downLoadTime" jdbcType="TIMESTAMP" />
		<result column="roll_day" property="rollDay" jdbcType="VARCHAR" />
		<result column="roll_type" property="rollType" jdbcType="TINYINT" />
		<result column="pay_mode" property="payMode" jdbcType="TINYINT" />
		<result column="predict_pay_time" property="predictPayTime" jdbcType="TIMESTAMP" />
	</resultMap>

	<sql id="list_where_clause">
		<if test="statusList != null and statusList != ''">
			and pb.status in
			<foreach collection="statusList" index="index" item="item" open="(" separator="," close=")">
				#{item,jdbcType=TINYINT}
			</foreach>
		</if>

		<if test="status != null and status != ''">
			and pb.status = #{status,jdbcType=TINYINT}
		</if>
		<if test="type != null and type != ''">
			and pb.type = #{type,jdbcType=TINYINT}
		</if>
		<if test="bussinessType != null and bussinessType != ''">
			and pbc.biz_type = #{bussinessType,jdbcType=TINYINT}
		</if>
		<if test="bussinessName != null and bussinessName != ''">
			and pbc.biz_name
			like
			concat('%',#{bussinessName,jdbcType=VARCHAR},'%')
		</if>
		<if test="createAtStart != null and createAtStart != ''">
			and pb.cycle_start_time &gt;=
			#{createAtStart,jdbcType=TIMESTAMP}
		</if>
		<if test="createAtEnd != null and createAtEnd != ''">
			and pb.cycle_start_time &lt;=
			#{createAtEnd,jdbcType=TIMESTAMP}
		</if>
		<if test="batchNo != null and batchNo != ''">
			and pb.batch_no = #{batchNo,jdbcType=VARCHAR}
		</if>
		<if test="payChannel != null and payChannel != ''">
			and pbc.pay_channel = #{payChannel,jdbcType=TINYINT}
		</if>
		<if test="payChannelList != null and payChannelList != ''">
			and pbc.pay_channel in
			<foreach collection="payChannelList" index="index" item="item" open="(" separator="," close=")">
				#{item,jdbcType=TINYINT}
			</foreach>
		</if>
		<if test="payAccount != null and payAccount != ''">
			and bi.pay_account
			like
			concat('%',#{payAccount,jdbcType=VARCHAR},'%')
		</if>
		<if test="blankName != null and blankName != ''">
			and bi.blank_name like
			concat('%',#{blankName,jdbcType=VARCHAR},'%')
		</if>
		<if test="statusUpdateStartTime != null and statusUpdateStartTime != ''">
			and pb.status_update_time &gt;=
			#{statusUpdateStartTime,jdbcType=TIMESTAMP}
		</if>
		<if test="statusUpdateEndTime != null and statusUpdateEndTime != ''">
			and pb.status_update_time &lt;=
			#{statusUpdateEndTime,jdbcType=TIMESTAMP}
		</if>
		<if test="idArray != null and idArray !=''">
			and pb.id in
			<foreach collection="idArray" index="index" item="item" open="(" separator="," close=")">
				#{item,jdbcType=TINYINT}
			</foreach>
		</if>
		<if test="op_model != null and op_model != ''">
			and ol.op_model = #{op_model}
			<if test="statusList != null and statusList != ''">
				and op_type in
				<foreach collection="statusList" index="index" item="item" open="(" separator="," close=")">
					#{item,jdbcType=TINYINT}
				</foreach>
			</if>
		</if>
		<if test="minPayTotal != null and minPayTotal != ''">
			and pb.pay_total &gt;= #{minPayTotal}*100
		</if>
		<if test="maxPayTotal != null and maxPayTotal != ''">
			and pb.pay_total &lt;= #{maxPayTotal}*100
		</if>
		<if test="bussinessAccount != null and bussinessAccount != ''">
			and bi.biz_account = #{bussinessAccount,jdbcType=VARCHAR}
		</if>
	</sql>

	<select id="selectPageList" resultMap="DtoResultMap" parameterType="java.util.Map">
		select * from (select
		pb.id, pb.type, pb.batch_no, pb.cycle_start_time,
		pb.cycle_end_time,
		pb.pay_total, pb.status, pb.pay_no,pb.create_at,
		pb.status_update_time,
		pbc.biz_name, pbc.biz_id, pbc.pay_channel,
		pbc.biz_type,
		bi.biz_email, bi.pay_account, bi.blank_name, bi.pay_name,
		ol.desc,ol.create_user_id as download_user,ol.create_at as
		download_time,pbc.roll_day,pbc.roll_type,pbc.pay_mode,pb.create_at as
		predict_pay_time
		from payment_bill pb
		left join payment_bill_config pbc
		on pb.config_id=pbc.id
		left join biz_info bi on bi.config_id=pbc.id
		left join op_log ol on ol.op_id=pb.id
		<where>
			<include refid="list_where_clause" />
		</where>
		order by pb.create_at,pb.status_update_time,ol.create_at desc
		) tb
		group by tb.id
		order by tb.create_at desc,tb.status_update_time
		desc,tb.create_at desc
		<if test="currentPage != null and pageSize != null">
			limit
			#{currentPage,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
		</if>
	</select>

	<select id="selectPageListForMerchant" resultMap="DtoResultMap" parameterType="java.util.Map">
		select * from (select
		pb.id, pb.type, pb.batch_no, pb.cycle_start_time,
		pb.cycle_end_time,
		pb.pay_total, pb.status, pb.pay_no,pb.create_at,
		pb.status_update_time,
		pbc.biz_name, pbc.biz_id, pbc.pay_channel,
		pbc.biz_type,
		bi.biz_email, bi.pay_account, bi.blank_name, bi.pay_name,
		ol.desc,ol.create_user_id as download_user,ol.create_at as
		download_time,pbc.roll_day,pbc.roll_type,pbc.pay_mode,pb.create_at as
		predict_pay_time
		from payment_bill pb
		left join payment_bill_config pbc
		on pb.config_id=pbc.id
		left join biz_info bi on bi.config_id=pbc.id
		left join op_log ol on ol.op_id=pb.id
		where pb.status != 0 and
		pb.status != 2 and bi.biz_account =
		#{bussinessAccount,jdbcType=VARCHAR}
		and
		((pb.status=8 and
		ol.create_user_id=#{bussinessAccount,jdbcType=VARCHAR}) or (pb.status
		!= 8))
		<if test="statusList != null and statusList != ''">
			and pb.status in
			<foreach collection="statusList" index="index" item="item" open="(" separator="," close=")">
				#{item,jdbcType=TINYINT}
			</foreach>
		</if>
		<if test="createAtStart != null and createAtStart != ''">
			and pb.cycle_start_time &gt;=
			#{createAtStart,jdbcType=TIMESTAMP}
		</if>
		<if test="predictPayTimeBegin!=null">
			and pb.predict_pay_time &lt; #{predictPayTimeBegin}
		</if>
		<if test="createAtEnd != null and createAtEnd != ''">
			and pb.cycle_start_time &lt;=
			#{createAtEnd,jdbcType=TIMESTAMP}
		</if>
		order by pb.create_at,pb.status_update_time,ol.create_at desc
		) tb
		group by tb.id
		order by tb.create_at desc,tb.status_update_time
		desc,tb.create_at desc
		<if test="currentPage != null and pageSize != null">
			limit
			#{currentPage,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
		</if>
	</select>

	<select id="selectPageListCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(total.id) from (select pb.id from payment_bill pb
		left
		join payment_bill_config pbc on pb.config_id=pbc.id
		left join biz_info
		bi
		on bi.config_id=pbc.id
		left join op_log ol on ol.op_id=pb.id
		<where>
			<include refid="list_where_clause" />
		</where>
		group by pb.id
		) as total
	</select>

	<select id="selectPageListCountForMerchant" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(total.id) from (select pb.id from payment_bill pb
		left
		join payment_bill_config pbc on pb.config_id=pbc.id
		left join biz_info
		bi
		on bi.config_id=pbc.id
		left join op_log ol on ol.op_id=pb.id
		where
		pb.status != 0 and pb.status != 2 and bi.biz_account =
		#{bussinessAccount,jdbcType=VARCHAR}
		and ((pb.status=8 and
		ol.create_user_id=#{bussinessAccount,jdbcType=VARCHAR}) or (pb.status
		!= 8))
		<if test="statusList != null and statusList != ''">
			and pb.status in
			<foreach collection="statusList" index="index" item="item" open="(" separator="," close=")">
				#{item,jdbcType=TINYINT}
			</foreach>
		</if>
		<if test="createAtStart != null and createAtStart != ''">
			and pb.cycle_start_time &gt;=
			#{createAtStart,jdbcType=TIMESTAMP}
		</if>
		<if test="createAtEnd != null and createAtEnd != ''">
			and pb.cycle_start_time &lt;=
			#{createAtEnd,jdbcType=TIMESTAMP}
		</if>
		group by pb.id
		) as total
	</select>

	<select id="selectByCycleTime" resultMap="BaseResultMap" parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		from payment_bill
		where config_id = #{configId,jdbcType=INTEGER}
		and
		cycle_start_time = #{cycleStartTime,jdbcType=TIMESTAMP}
		and
		cycle_end_time = #{cycleEndTime,jdbcType=TIMESTAMP}
	</select>

	<update id="updateStatusByIds" parameterType="map">
		update payment_bill
		set status=#{status, jdbcType=INTEGER},
		status_update_time = #{statusUpdateTime,jdbcType=TIMESTAMP}
		<where>
			<if test="ids != null">
				AND id in
				<foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
					#{item}
				</foreach>
			</if>
		</where>
	</update>

	<update id="cancel" parameterType="java.lang.Integer">
		update payment_bill set
		status=8 where id=#{id, jdbcType=INTEGER}
	</update>

	<!-- 通过对账单id查询对账单信息 -->
	<select id="searchDtoById" parameterType="int" resultMap="DtoResultMap">
		select
		pb.id, pb.type, pb.batch_no, pb.cycle_start_time, pb.cycle_end_time,
		pb.pay_total, pb.status, pb.pay_no,
		pb.status_update_time,
		pbc.biz_name, pbc.biz_id, pbc.pay_channel, pbc.biz_type,
		bi.biz_email,
		bi.pay_account, bi.blank_name, bi.pay_name
		from payment_bill pb
		left
		join payment_bill_config pbc on pb.config_id = pbc.id
		left join
		biz_info
		bi on pbc.id = bi.config_id
		where pb.id=#{id,
		jdbcType=INTEGER}
	</select>

	<resultMap id="StatementDetailMap" type="com.rongyi.settle.dto.CouponStatementDetailDto">
		<id column="order_no" property="orderNo" jdbcType="VARCHAR" />
		<result column="pay_no" property="payNo" jdbcType="VARCHAR" />
		<result column="use_time" property="useTime" jdbcType="TIMESTAMP" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="coupon_id" property="couponId" jdbcType="VARCHAR" />
		<result column="coupon_code" property="couponCode" jdbcType="VARCHAR" />
		<result column="title" property="title" jdbcType="VARCHAR" />
		<result column="revenue_type" property="revenueType" jdbcType="VARCHAR" />
		<result column="pay_channel" property="payChannel" jdbcType="VARCHAR" />
		<result column="orig_price" property="origPrice" jdbcType="INTEGER" />
		<result column="pay_amount" property="payAmount" jdbcType="INTEGER" />
		<result column="hb_discount" property="hbDiscount" jdbcType="INTEGER" />
		<result column="score_discount" property="scoreDiscount" jdbcType="INTEGER" />
		<result column="discount" property="discount" jdbcType="INTEGER" />
		<result column="user_phone" property="userPhone" jdbcType="VARCHAR" />
		<result column="shop_id" property="shopId" jdbcType="VARCHAR" />
		<result column="shop_name" property="shopName" jdbcType="VARCHAR" />
		<result column="mall_id" property="mallId" jdbcType="VARCHAR" />
		<result column="mall_name" property="mallName" jdbcType="VARCHAR" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="guide_name" property="guideName" jdbcType="VARCHAR" />
		<result column="guide_phone" property="guidePhone" jdbcType="VARCHAR" />
		<result column="source" property="source" jdbcType="VARCHAR" />
	</resultMap>

	<select id="selectForStatementDetails" parameterType="java.util.Map" resultMap="StatementDetailMap">
		select
		tor.order_no,tor.pay_no,tuc.use_time,tor.create_at,tuc.coupon_id,tuc.coupon_code,tuc.title,'收入'
		as revenue_type,
		(CASE tor.pay_channel WHEN
		1 THEN '支付宝' WHEN 5 THEN
		'微信' WHEN 3 THEN '支付宝'
		ELSE '其他' END) as pay_channel,tuc.orig_price,
		ROUND(tor.pay_amount/tor.code_num, 0) as
		pay_amount,
		ROUND(tor.hb_discount/tor.code_num, 0) as hb_discount,
		ROUND(tor.score_discount/tor.code_num, 0) as score_discount,
		tuc.orig_price-tuc.unit_price discount,tuc.user_phone,tuc.shop_id,
		tor.user_name,rui.user_name as guide_name,rui.user_phone as
		guide_phone
		from ry_trade.trade_user_code tuc
		join ry_trade.trade_order
		tor on tuc.order_id=tor.id
		left join ry_rmmm.rmmm_user_info rui on
		rui.id=tuc.checked_user_id
		where tuc.status=2
		and tuc.use_time between
		#{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
		AND tuc.shop_id = #{shopId,jdbcType=VARCHAR}
	</select>
	
	<select id="selectForStatementDetailsByMid" parameterType="java.util.Map" resultMap="StatementDetailMap">
		SELECT
			tor.order_no,
			tor.pay_no,
			tuc.use_time,
			tor.create_at,
			tuc.coupon_id,
			tuc.coupon_code,
			tuc.title,
			'收入' AS revenue_type,
			(
				CASE tor.pay_channel
				WHEN 1 THEN
					'支付宝'
				WHEN 5 THEN
					'微信'
				WHEN 3 THEN
					'支付宝'
				ELSE
					'其他'
				END
			) AS pay_channel,
			tuc.orig_price,
			ROUND(tor.pay_amount / tor.code_num, 0) AS pay_amount,
			ROUND((tor.hb_discount + tor.rebate_discount)s / tor.code_num, 0) AS hb_discount,
			ROUND(tor.score_discount / tor.code_num, 0) AS score_discount,
			tuc.orig_price - tuc.unit_price discount,
			tuc.user_phone,
			tuc.shop_id,
			tor.user_name,
			rui.user_name AS guide_name,
			rui.user_phone AS guide_phone,
			US.shop_id,
			US.mall_id,
			SI.shop_name,
			MC.mall_name,
			CASE tor.source WHEN 0 THEN '容易逛' WHEN 1 THEN '微网站' WHEN 2 THEN '终端机' ELSE '其他' END AS source
		FROM
			ry_trade.trade_user_code tuc
				JOIN ry_trade.trade_order tor ON tuc.order_id = tor.id
				LEFT JOIN ry_rmmm.rmmm_user_info rui ON rui.id = tuc.checked_user_id
				LEFT JOIN ry_rmmm.user_shop AS US ON tuc.checked_user_id = US.user_id
				LEFT JOIN ry_rmmm.mall_cooperate AS MC ON US.mall_id = MC.id
				LEFT JOIN ry_rmmm.shop_info AS SI ON SI.id = US.shop_id
				LEFT JOIN ry_rmmm.brand_info AS BI ON BI.id = SI.brand_id
		WHERE tuc.status=2
			AND tuc.use_time BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
			<if test="brandId != null">
				AND BI.brand_mid = #{brandId,jdbcType=VARCHAR}
			</if>
			<if test="mallId != null">
				AND MC.mall_mid = #{mallId,jdbcType=VARCHAR}
			</if>
			<if test="shopId != null">
				AND SI.shop_mid = #{shopId,jdbcType=VARCHAR}
			</if>
	</select>

	<select id="selectForStatementDetailsByUsers" parameterType="java.util.Map" resultMap="StatementDetailMap">
		SELECT
			tor.order_no,
			tor.pay_no,
			tuc.use_time,
			tor.create_at,
			tuc.coupon_id,
			tuc.coupon_code,
			tuc.title,
			'收入' AS revenue_type,
			(
				CASE tor.pay_channel
				WHEN 1 THEN
					'支付宝'
				WHEN 5 THEN
					'微信'
				WHEN 3 THEN
					'支付宝'
				ELSE
					'其他'
				END
			) AS pay_channel,
			tuc.orig_price,
			ROUND(tor.pay_amount / tor.code_num, 0) AS pay_amount,
			ROUND((tor.hb_discount + tor.rebate_discount) / tor.code_num, 0) AS hb_discount,
			ROUND(tor.score_discount / tor.code_num, 0) AS score_discount,
			tuc.orig_price - tuc.unit_price discount,
			tuc.user_phone,
			tuc.shop_id,
			tor.user_name,
			rui.user_name AS guide_name,
			rui.user_phone AS guide_phone,
			US.shop_id,
			US.mall_id,
			SI.shop_name,
			MC.mall_name,
		 	CASE tor.source WHEN 0 THEN '容易逛' WHEN 1 THEN '微网站' WHEN 2 THEN '终端机' ELSE '其他' END AS source
		FROM
			ry_trade.trade_user_code tuc
				JOIN ry_trade.trade_order tor ON tuc.order_id = tor.id
				LEFT JOIN ry_rmmm.rmmm_user_info rui ON rui.id = tuc.checked_user_id
				LEFT JOIN ry_rmmm.user_shop AS US ON tuc.checked_user_id = US.user_id
				LEFT JOIN ry_rmmm.mall_cooperate AS MC ON US.mall_id = MC.id
				LEFT JOIN ry_rmmm.shop_info AS SI ON SI.id = US.shop_id
		WHERE tuc.status=2
			AND tuc.use_time BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
			AND tuc.checked_user_id IN 
			<foreach item="item" index="index" collection="userIds" open="("  separator="," close=")">  
            	#{item}  
        	</foreach>  
	</select>

	<resultMap id="CouponExcelDtoMap" type="com.rongyi.settle.dto.CouponExcelDto">
		<result column="shop_name" property="shopName" jdbcType="VARCHAR" />
		<result column="coupon_id" property="couponId" jdbcType="VARCHAR" />
		<result column="title" property="couponName" jdbcType="VARCHAR" />
		<result column="pay_channel" property="revenueType" jdbcType="VARCHAR" />
		<result column="coupon_count" property="couponCount" jdbcType="INTEGER" />
		<result column="coupon_price" property="couponPrice" jdbcType="INTEGER" />
		<result column="total_price" property="couponPriceTotal" jdbcType="INTEGER" />
		<result column="total_discount" property="couponDiscountTotal" jdbcType="INTEGER" />
		<result column="total_score" property="couponScoreTotal" jdbcType="INTEGER" />
		<result column="total_hb" property="couponHbTotal" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="OrderTopDtoMap" type="com.rongyi.settle.dto.OrderSettlementTopDto">
		<result column="shop_name" property="shopName" jdbcType="VARCHAR" />
		<result column="income_type" property="incomeType" jdbcType="VARCHAR" />
		<result column="order_type" property="orderType" jdbcType="VARCHAR" />
		<result column="order_count" property="orderCount" jdbcType="INTEGER" />
		<result column="hb_amount" property="hbDiscountTotal" jdbcType="DOUBLE" />
		<result column="score_amount" property="scoreDiscountTotal" jdbcType="DOUBLE" />
		<result column="total_amount" property="orderAmountTotal" jdbcType="DOUBLE" />
		<result column="discount_amount" property="orderDiscountTotal" jdbcType="DOUBLE" />
	</resultMap>

	<resultMap id="OrderDetailDtoMap" type="com.rongyi.settle.dto.OrderSettlementDetailDto">
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="order_no" property="orderNo" jdbcType="VARCHAR" />
		<result column="order_status" property="orderStatus" jdbcType="VARCHAR" />
		<result column="commodity_id" property="commodityId" jdbcType="VARCHAR" />
		<result column="commodity_name" property="commodityName" jdbcType="VARCHAR" />
		<result column="shop_id" property="shopId" jdbcType="VARCHAR" />
		<result column="shop_name" property="shopName" jdbcType="VARCHAR" />
		<result column="mall_id" property="mallId" jdbcType="VARCHAR" />
		<result column="mall_name" property="mallName" jdbcType="VARCHAR" />
		<result column="orig_price" property="origPrice" jdbcType="DOUBLE" />
		<result column="pay_amount" property="payAmount" jdbcType="DOUBLE" />
		<result column="coupon_discount" property="hbDiscount" jdbcType="DOUBLE" />
		<result column="score_discount" property="scoreDiscount" jdbcType="DOUBLE" />
		<result column="pay_channel" property="paymentChannel" jdbcType="VARCHAR" />
		<result column="payment_time" property="paymentTime" jdbcType="TIMESTAMP" />
		<result column="delivery_time" property="deliveryTime" jdbcType="TIMESTAMP" />
		<result column="receipt_time" property="receiptTime" jdbcType="TIMESTAMP" />
		<result column="buyer_phone" property="buyerPhone" jdbcType="VARCHAR" />
		<result column="order_source" property="orderSource" jdbcType="VARCHAR" />
	</resultMap>

	<select id="selectForCouponExcelDto" parameterType="java.util.Map" resultMap="CouponExcelDtoMap">
		SELECT SQL_NO_CACHE
			SI.shop_name
			,UC.coupon_id AS coupon_id
			,IFNULL(UC.title, '其他') AS title
			,'收入' AS pay_channel
			,COUNT(1) AS coupon_count
			,MAX(UC.orig_price) AS coupon_price
			,SUM(UC.orig_price) AS total_price
			,SUM(UC.orig_price - UC.unit_price) AS total_discount
			,SUM(IFNULL(((CO.hb_discount + CO.rebate_discount) / COI.unit_count), 0)) AS total_hb
			,SUM(IFNULL((CO.score_discount / COI.unit_count), 0)) AS total_score
		FROM ry_trade.trade_user_code UC
			LEFT JOIN
				ry_trade.trade_order CO ON CO.id = UC.order_id
			LEFT JOIN
				ry_trade.trade_sub_order COI ON COI.order_id = UC.order_id
			LEFT JOIN
				ry_rmmm.user_shop US ON US.user_id = UC.checked_user_id
			LEFT JOIN
				ry_rmmm.shop_info SI ON SI.id = US.shop_id
			LEFT JOIN
				ry_rmmm.mall_cooperate MA ON MA.id = US.mall_id
		WHERE UC.status=2
			AND UC.use_time BETWEEN
				#{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
			AND
				UC.shop_id = #{shopId,jdbcType=VARCHAR}
		GROUP BY SI.id,UC.coupon_id
	</select>
	
	<select id="selectForCouponExcelDtoByUsers" parameterType="java.util.Map" resultMap="CouponExcelDtoMap">
		SELECT SQL_NO_CACHE
			SI.shop_name
			,UC.coupon_id AS coupon_id
			,IFNULL(UC.title, '其他') AS title
			,'收入' AS pay_channel
			,COUNT(1) AS coupon_count
			,MAX(UC.orig_price) AS coupon_price
			,SUM(UC.orig_price) AS total_price
			,SUM(UC.orig_price - UC.unit_price) AS total_discount
			,SUM(IFNULL(((CO.hb_discount + CO.rebate_discount) / COI.unit_count), 0)) AS total_hb
			,SUM(IFNULL((CO.score_discount / COI.unit_count), 0)) AS total_score
		FROM ry_trade.trade_user_code UC
			LEFT JOIN
				ry_trade.trade_order CO ON CO.id = UC.order_id
			LEFT JOIN
				ry_trade.trade_sub_order COI ON COI.order_id = UC.order_id
			LEFT JOIN
				ry_rmmm.user_shop US ON US.user_id = UC.checked_user_id
			LEFT JOIN
				ry_rmmm.shop_info SI ON SI.id = US.shop_id
			LEFT JOIN
				ry_rmmm.mall_cooperate MA ON MA.id = US.mall_id
		WHERE UC.status=2
			AND UC.use_time BETWEEN
				#{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
			AND
				UC.checked_user_id IN
				<foreach item="item" index="index" collection="userIds" open="("  separator="," close=")">  
	            	#{item}  
	        	</foreach>  
		GROUP BY SI.id,UC.coupon_id
	</select>

	<select id="selectForConfigShopsById" parameterType="java.util.Map" resultType="String">
		SELECT
			real_user_list
		FROM
			ry_rpb.config_shop
		WHERE
			config_id = #{configId,jdbcType=INTEGER}
	</select>

	<select id="selectForCouponExcelDtoByMid" parameterType="java.util.Map" resultMap="CouponExcelDtoMap">
		SELECT SQL_NO_CACHE
			SI.shop_name
			,UC.coupon_id AS coupon_id
			,IFNULL(UC.title, '其他') AS title
			,'收入' AS pay_channel
			,COUNT(1) AS coupon_count
			,MAX(UC.orig_price) AS coupon_price
			,SUM(UC.orig_price) AS total_price
			,SUM(UC.orig_price - UC.unit_price) AS total_discount
			,SUM(IFNULL((CO.hb_discount / COI.unit_count), 0)) AS total_hb
			,SUM(IFNULL((CO.score_discount / COI.unit_count), 0)) AS total_score
		FROM ry_trade.trade_user_code UC
			LEFT JOIN
				ry_trade.trade_order CO ON CO.id = UC.order_id
			LEFT JOIN
				ry_trade.trade_sub_order COI ON COI.order_id = UC.order_id
			LEFT JOIN
				ry_rmmm.user_shop US ON US.user_id = UC.checked_user_id
			LEFT JOIN
				ry_rmmm.shop_info SI ON SI.id = US.shop_id
			LEFT JOIN
				ry_rmmm.mall_cooperate MC ON MC.id = US.mall_id
			LEFT JOIN
				ry_rmmm.brand_info AS BI ON BI.id = SI.brand_id
		WHERE UC.status=2
			AND UC.use_time BETWEEN
				#{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
			<if test="brandId != null">
				AND BI.brand_mid = #{brandId,jdbcType=VARCHAR}
			</if>
			<if test="mallId != null">
				AND MC.mall_mid = #{mallId,jdbcType=VARCHAR}
			</if>
			<if test="shopId != null">
				AND SI.shop_mid = #{shopId,jdbcType=VARCHAR}
			</if>
		GROUP BY SI.id,UC.coupon_id
	</select>

	<select id="selectForOrderTopDto" parameterType="java.util.Map" resultMap="OrderTopDtoMap">
		SELECT SQL_NO_CACHE
			SI.shop_name,
			'收入' AS income_type,
			'商品订单' AS order_type,
		    COUNT(1) AS order_count,
			SUM(ODF.unit_price * quantity - OF.disconnt_fee + express_fee) AS total_amount,
			SUM(OF.score_discount + OF.order_score_discount) AS score_amount,
			SUM(OF.coupon_discount + OF.order_coupon_discount + ODF.coupon_discount) AS hb_amount,
			0 AS discount_amount
		FROM
		    ry_osm.order_form OF
		        INNER JOIN
		    ry_osm.order_event H3 ON OF.order_no = H3.order_no and H3.`status` = 3
		        LEFT JOIN
		    ry_osm.order_detail_form ODF ON OF.order_no = ODF.order_no
		        LEFT JOIN
		    ry_rmmm.user_shop US ON OF.guide_id = US.user_id
		        LEFT JOIN
		    ry_rmmm.mall_cooperate MC ON US.mall_id = MC.id
		        LEFT JOIN
		    ry_rmmm.shop_info SI ON US.shop_id = SI.id
		    	LEFT JOIN
		    ry_rmmm.brand_info AS BI ON BI.id = SI.brand_id	
		WHERE
		    H3.create_at BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
			AND OF.`status` &gt; 2
			AND OF.is_pay_va = 0
			<if test="brandId != null">
				AND BI.brand_mid = #{brandId,jdbcType=VARCHAR}
			</if>
			<if test="mallId != null">
				AND MC.mall_mid = #{mallId,jdbcType=VARCHAR}
			</if>
			<if test="shopId != null">
				AND SI.shop_mid = #{shopId,jdbcType=VARCHAR}
			</if>
			<if test="userIds != null">
				AND OF.guide_id IN
				<foreach item="item" index="index" collection="userIds" open="("  separator="," close=")">  
	            	#{item}  
	        	</foreach>  
			</if>
		GROUP BY SI.id
	</select>
	
	<select id="selectForOrderDetailDto" parameterType="java.util.Map" resultMap="OrderDetailDtoMap">
		SELECT SQL_NO_CACHE
			A.create_at,
			A.coupon_discount + A.order_coupon_discount + SUM(B.coupon_discount) AS coupon_discount,
			A.score_discount + A.order_score_discount AS score_discount,
			CASE WHEN A.`status` = 2 THEN '待发货' WHEN A.`status` = 3 THEN '已发货' WHEN A.`status` = 4 THEN '确认收货'
				WHEN (A.`status` > 4 AND H3.id IS NOT NULL) THEN '已完成'
				WHEN (A.`status` > 4 AND H3.id IS NULL AND H4.id IS NULL) THEN'退款'
				ELSE '状态异常' END AS order_status,
		 	A.order_no,
		 	B.commodity_mid AS commodity_id,
		 	N.`name` AS commodity_name,
			CASE WHEN (O.pay_channel = 0 OR PO.pay_channel = 0) THEN '支付宝' WHEN (O.pay_channel = 1 OR PO.pay_channel = 1) THEN '微信' ELSE '其他' END AS `pay_channel`,
		 	D.mall_mid AS mall_id,
		 	D.mall_name,
		 	E.shop_mid AS shop_id,
		 	E.shop_name,
		 	(B.unit_price * quantity - A.disconnt_fee) AS orig_price,
		 	A.total_amount AS pay_amount,
		 	H2.create_at AS payment_time,
		 	H3.create_at AS delivery_time,
		 	H4.create_at AS receipt_time,
		 	MUA.phone AS buyer_phone,
			CASE A.order_source WHEN 0 THEN '微网站' WHEN 1 THEN '容易逛' WHEN 2 THEN '终端机' ELSE '其他' END AS order_source
		FROM
			ry_osm.order_form A
				LEFT JOIN ry_osm.order_detail_form B ON A.order_no = B.order_no
				LEFT JOIN ry_rmmm.user_shop C ON A.guide_id = C.user_id
				LEFT JOIN ry_rmmm.mall_cooperate D ON C.mall_id = D.id
				LEFT JOIN ry_rmmm.shop_info E ON C.shop_id = E.id
				LEFT JOIN ry_rmmm.brand_info BI ON BI.id = E.brand_id
				INNER JOIN ry_osm.order_event H2 ON A.order_no = H2.order_no AND H2.`status` = 2
				INNER JOIN ry_osm.order_event H3 ON A.order_no = H3.order_no AND H3.`status` = 3
				LEFT JOIN ry_osm.order_event H4 ON A.order_no = H4.order_no AND H4.`status` = 4
				LEFT JOIN ry_rpb.payment_order O ON A.order_no = O.order_no AND O.trade_type = 0 AND O.`status` = 2
				LEFT JOIN ry_osm.order_cart_form OCF ON OCF.id = A.cart_id
				LEFT JOIN ry_rpb.payment_order PO ON OCF.order_no = PO.order_no and PO.trade_type = 0 AND PO.`status` = 2
				LEFT JOIN ry_data.m_mcmc_commodity N ON B.commodity_mid = N.mid
				LEFT JOIN ry_user.malllife_user_info MUA ON MUA.id = A.buyer_id
		WHERE H3.create_at BETWEEN #{startTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}
			AND A.`status` &gt; 2
			AND A.is_pay_va = 0
			<if test="brandId != null">
				AND BI.brand_mid = #{brandId,jdbcType=VARCHAR}
			</if>
			<if test="mallId != null">
				AND D.mall_mid = #{mallId,jdbcType=VARCHAR}
			</if>
			<if test="shopId != null">
				AND E.shop_mid = #{shopId,jdbcType=VARCHAR}
			</if>
			<if test="userIds != null">
				AND A.guide_id IN
				<foreach item="item" index="index" collection="userIds" open="("  separator="," close=")">  
	            	#{item}  
	        	</foreach>
			</if>
		GROUP BY
			A.order_no;
	</select>
	
</mapper>