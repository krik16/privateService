package com.rongyi.osm.knowledge
//created on: 2015-2-28
//author: fuqiang

//处理各种事件的一般流程
//1. 先写日志
//2. 再写日志数据库（如果有的话）
//3. 然后写订单数据库
//4. 最后写Drools数据库

//放置各种包的引用
import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import net.sf.json.JSONObject;
import java.math.BigDecimal;
import org.slf4j.Logger;
import com.rongyi.easy.gcc.Configurations;

import com.rongyi.easy.osm.entity.OrderFormEntity;
import com.rongyi.easy.osm.entity.OrderDetailFormEntity;
import com.rongyi.easy.osm.entity.OrderEventEntity;
import com.rongyi.easy.osm.entity.ApplicationFormEntity;

import com.rongyi.osm.mq.SpringAmqpSender;

import com.rongyi.osm.service.OrderFormService;
import com.rongyi.osm.service.OrderEventService;
import com.rongyi.osm.service.OrderDetailFormService;
import com.rongyi.osm.service.ApplicationFormServiceImpl;

import com.rongyi.osm.constant.OrderFormStatus;
import com.rongyi.osm.constant.CashCouponStatus;
import com.rongyi.osm.constant.OrderDetailFormStatus;
import com.rongyi.osm.constant.ApplicationFormStatus;

import com.rongyi.core.constant.OrderEventType;
import com.rongyi.core.constant.OrderEventType.EventErrorCode;
import com.rongyi.core.constant.PaymentEventType;

import com.rongyi.osm.knowledge.SessionUtil;
import net.sf.json.JSONArray;


//全局变量声明
global Logger logger;
global OrderFormService orderFormService;
global OrderDetailFormService orderDetailFormService;
global OrderEventService orderEventService;
global ApplicationFormServiceImpl applicationFormService;
global Configurations orderConfig;
global OrderUtil orderUtil;
global SpringAmqpSender msgSender;
global SessionUtil sessionUtil;



//订单创建事件
declare OrderCreateEvent
	@role(event)
	@expires(0)
end

declare OrderManualCloseEvent
	@role(event)
	@expires(0)
end

declare OrderPriceChangeEvent
	@role(event)
	@expires(0)
end

declare OrderDeliveryEvent
	@role(event)
	@expires(0)
end

declare OrderPaidEvent
	@role(event)
	@expires(0)
end

declare OrderDeliveryConfirmEvent
	@role(event)
	@expires(0)
end

declare OrderRefundRequestEvent
	@role(event)
	@expires(0)
end

declare OrderRefundCancelEvent
	@role(event)
	@expires(0)
end

declare OrderRefundAcceptEvent
	@role(event)
	@expires(0)
end

declare OrderRefundRefuseEvent
	@role(event)
	@expires(0)
end

declare OrderAppealRequestEvent
	@role(event)
	@expires(0)
end

declare OrderAppealCancelEvent
	@role(event)
	@expires(0)
end

declare OrderJudgeNoRefundEvent
	@role(event)
	@expires(0)
end

declare OrderJudgeRefundEvent
	@role(event)
	@expires(0)
end

declare OrderReloadEvent
	@role(event)
	@expires(0)
end

declare OrderIsCommentEvent
	@role(event)
	@expires(0)
end

declare OrderAdultsRefundAcceptEvent
	@role(event)
	@expires(0)
end

declare PaymentResponseEvent
	@role(event)
	@expires(0)
end

declare OrderPriceResetEvent
	@role(event)
	@expires(0)
end

declare OrderCancelBySellerEvent
	@role(event)
	@expires(0)
end

//函数声明
query getOrder(String num)
	order: OrderFormEntity(orderNo == num)
end

query getOrderDetail(String num)
	orderDetail: OrderDetailFormEntity(orderItemNo == num)
end

query getOrderDetailList(String num)
	orderDetail: OrderDetailFormEntity(orderNo == num)
end

query getApplication(Integer appId)
	application: ApplicationFormEntity(id == appId)
end

query getPaymentAction(String num, String detail)
	action: PaymentAction(orderNo == num, orderItemNo == detail)
end

//query for monitoring START
query getOrderByPrice(BigDecimal price)
	order: OrderFormEntity(totalAmount > price)
end

query getOrderByCreateAfter(Date date)
	order: OrderFormEntity(createAt.after(date))
end

query getOrderByCreateBetween(Date before, Date after)
	order: OrderFormEntity(createAt.after(after), createAt.before(before))
end
//query for monitoring END

//欢迎
rule "欢迎"
	when
		not OrderFormEntity()
	then
		logger.info("欢迎来到OSM，我开始工作了>.< ...");
end

//买家下单
rule "买家下单"
salience 100
    when
        $event: OrderCreateEvent($orderNo: orderNo)
        not OrderFormEntity(orderNo == $orderNo)	// 确保订单号没有重复
        //not $otherEvent: OrderCreateEvent(orderNo == $orderNo, !$event.equals($otherEvent))
    then
    	logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");

    	// 获得订单和子订单列表
    	OrderFormEntity order = $event.getOrderFormEntity();
		OrderDetailFormEntity[] orderDetailList = $event.getOrderDetailFormEntityList();
     if(orderUtil.createOrder(order,orderDetailList)){
	        // 设置订单  状态为：等待付款  未评价
	        order.setStatus(OrderFormStatus.UNPAID);
	        order.setStatusRoute(null);
	        order.setIsComment(0);
	        
	        // 设置子订单  状态为：正常 退款未成功 退款次数 维权名额
	        for (OrderDetailFormEntity entity: orderDetailList) {
	        	entity.setStatus(OrderDetailFormStatus.NORMAL);
	        	entity.setIsRefunded(0);
	        	entity.setAppealTimes(0);
	        	entity.setRefundTimes(0);
	        	entity.setAppealId(0);
	        }
	        
	        // 根据创建订单消息传入的总价计算订单折扣
			orderUtil.orderSetDiscount(order.getTotalAmount(), order, orderDetailList);
			
			// 计算订单总价
			order.setTotalAmount(orderUtil.calculateTotalPrice(order, orderDetailList));
		
			// 更新现金券状态
			if (orderUtil.setCouponStatus(orderDetailList, CashCouponStatus.USED, order.getGuideId())) {
				// 设置创建时间,过期时间,状态保持剩余时间
		        order.setCreateAt(orderUtil.getCurrentDate());
		        order.setNextStatusTime(
		        	orderUtil.getDateFromTime(
		        		order.getCreateAt().getTime() + orderConfig.getPaymentWaitMax()));
		        order.setStatusHoldMs(orderConfig.getPaymentWaitMax());
		        
			    // 入库订单和子订单
			    if(orderFormService.insert(order, orderDetailList)){
				    		// 入规则引擎
					for (OrderDetailFormEntity entity: orderDetailList) {
						sessionUtil.insert(entity);
					}
					sessionUtil.insert(order);
					
					// 减少库存
			        orderUtil.decreaseStock(order);	
			        
					logger.debug("[" + drools.getRule().getName() + "成功] {OrderNo:" +$orderNo + "}");	
					
					//记录日志
					//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo(order)).toString() +"}");	
					
					
					// 创建完成, 发送返回事件
					orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "订单创建成功");
			    		
			    	// 记录买家延迟未支付提醒消息事件
					PaymentAlert alert = PaymentAlert.create(order.getOrderNo(), order.getBuyerId(),
							orderUtil.getDateFromTime(order.getCreateAt().getTime() + 120000));
					insert(alert);
					
					logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
			    		$orderNo + " 结束.");				
					
			    } else {
			        logger.error("积分归还开始----------");
			        orderUtil.subtractScore(order); //还原积分
			        logger.error("积分归还结束----------");
			        logger.error("红包归还开始----------");
			        // 更新现金券状态
					if (!orderUtil.setCouponStatus(orderDetailList, CashCouponStatus.OCCUPIED, order.getGuideId())) {
						logger.error("[" + drools.getRule().getName() + "] OrderNo=" +
			    			$orderNo + " 现金券状态变更错误：现金券不存在或状态不正确");
					}
			        logger.error("红包归还结束----------");
			    	orderUtil.sendResponse($event, EventErrorCode.REQUEST_ORDER_EXISTS, "订单已经存在");
			    	logger.error("[" + drools.getRule().getName() + "] OrderNo=" + $orderNo + " 数据库存在重复订单,停止创建.");
			    }
			    
			} else {
			    orderUtil.subtractScore(order); //还原积分
				orderUtil.sendResponse($event, EventErrorCode.ORDER_COUPON_ERROR, "优惠券异常，订单创建失败");
				logger.error("[" + drools.getRule().getName() + "] OrderNo=" + $orderNo + " 现金券状态变更错误：现金券不存在或状态不正确，订单创建失败");
			}
	     }else{
             orderUtil.sendResponse($event, EventErrorCode.ORDER_SCORE_ERROR, "积分异常，订单创建失败");
			 logger.error("[" + drools.getRule().getName() + "] OrderNo=" + $orderNo + "积分异常：该账户没有积分或扣除积分失败，订单创建失败");
         }



end

rule "买家下单-错误情况"
salience 10
	when
		$event: OrderCreateEvent($orderNo: orderNo)
	then
		logger.error("[买家下单-错误情况] OrderNo=" + $orderNo + " 开始...");
		orderUtil.sendResponse($event, EventErrorCode.REQUEST_ORDER_EXISTS, "订单已经存在");
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家未支付消息提醒"
	when
		Clock($currentDate: currentDate)
		$alert: PaymentAlert($currentDate > nextStatusTime, 
			$orderNo: orderNo)
		$order: OrderFormEntity(status == OrderFormStatus.UNPAID, 
			orderNo == $orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
    	orderUtil.sendPaymentAlertMsg($alert.getBuyerId(), $orderNo);	
    	delete($alert);
end

rule "买家未支付消息提醒-已支付或无订单"
	when
		Clock($currentDate: currentDate)
		$alert: PaymentAlert($currentDate > nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$alert.getOrderNo() + " 开始...");
    	delete($alert);
end

rule "买家超时未支付"
	when
		Clock($currentDate: currentDate)
		$order: OrderFormEntity(status == OrderFormStatus.UNPAID, 
			$currentDate > nextStatusTime, $orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.CLOSED;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "订单支付超时", nextStatus, 
			OrderEventType.UNPAID_WITHIN_TIME);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(0L);
		$order.setNextStatusTime(orderUtil.getCurrentDate());
		
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);
		// 更新现金券状态
		if (!orderUtil.setCouponStatus(orderDetailList, CashCouponStatus.OCCUPIED, $order.getGuideId())) {
			logger.error("[" + drools.getRule().getName() + "] OrderNo=" +
    			$orderNo + " 现金券状态变更错误：现金券不存在或状态不正确");
		}
		
		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		// 归还库存
		orderUtil.increaseStock($order);
		
		boolean flag=orderUtil.subtractScore($order); //还原买家积分
		logger.debug("还原积分状态"+ flag + " end");
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家关闭订单"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderManualCloseEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, status == OrderFormStatus.UNPAID, 
			$currentDate < nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.CLOSED;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "卖家关闭订单", nextStatus,
			OrderEventType.MANUAL_CLOSED);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(0L);
		$order.setNextStatusTime(orderUtil.getCurrentDate());
		

		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		// 归还库存
		orderUtil.increaseStock($order);
		
		boolean flag=orderUtil.subtractScore($order); //还原买家积分
		logger.error("红包归还开始----------");
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($order.getOrderNo);
	    // 更新现金券状态
		if (!orderUtil.setCouponStatus(orderDetailList, CashCouponStatus.OCCUPIED, $order.getGuideId())) {
		    logger.error("[" + drools.getRule().getName() + "] OrderNo=" +$orderNo + " 现金券状态变更错误：现金券不存在或状态不正确");
		}
		logger.error("红包归还结束----------");
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "订单关闭成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家关闭订单-错误情况"
salience 10
	when
		$event: OrderManualCloseEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.sendCheckedResponse($event, OrderFormStatus.UNPAID);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家撤销订单(付款后)"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderCancelBySellerEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, status == OrderFormStatus.TO_SHIPPED,
		 $currentDate < nextStatusTime)
		not ApplicationFormEntity(orderNo == $orderNo, (
			status == ApplicationFormStatus.REFUND_REQUESTING || 
			status == ApplicationFormStatus.APPEALING || 
			status == ApplicationFormStatus.REFUND_REFUSED ||
			status == ApplicationFormStatus.APPEAL_REQUESTING))
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.CLOSED;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "卖家撤销订单", nextStatus,
			OrderEventType.CANCEL_BY_SELLER);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		logger.info("[PaymentEvent] 退款给买家: " + $order.getTotalAmount() + "元");
		
		// 生成退款事件
		PaymentEvent pay = new PaymentEvent();
		pay.setType(PaymentEventType.REFUND);
		pay.setTotalAmount($order.getTotalAmount());
		pay.setPaymentIdList($order.getPaymentIdList());
		pay.setOrderNo($orderNo);
		pay.setOrderItemNo(null);
		
		// 生成通知事件
		UserEvent notification = new UserEvent();
		notification.setOrderNo($orderNo);
		notification.setOrderItemNo(null);
		notification.setType(OrderEventType.CANCEL_BY_SELLER);
		notification.setSource("osm");
		notification.setTarget("osm_event_listener");

		// 记录退款响应需要进行的动作
		PaymentAction action = PaymentAction.create(pay.getType(),
			$order.getOrderNo(), null, $order.getPaymentIdList(), notification);
		sessionUtil.insert(action);
		// 缓存PaymentAction
		orderUtil.saveOrUpdatePaymentAction(action);
		
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(0L);
		$order.setNextStatusTime(orderUtil.getCurrentDate());
		

		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		// 归还库存
		orderUtil.increaseStock($order);
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "订单撤销成功");
		
		logger.error("红包归还开始----------");
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($order.getOrderNo);
	    // 更新现金券状态
		if (!orderUtil.setCouponStatus(orderDetailList, CashCouponStatus.OCCUPIED, $order.getGuideId())) {
		    logger.error("[" + drools.getRule().getName() + "] OrderNo=" +$orderNo + " 现金券状态变更错误：现金券不存在或状态不正确");
		}
		logger.error("红包归还结束----------");
		logger.debug("还原积分start"); 
	    boolean flag=orderUtil.subtractScore($order); //还原买家积分
		logger.debug("还原积分状态"+ flag + " end"); 
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		
		// add 20150710
		ApplicationFormEntity application = new ApplicationFormEntity();
		application.setCreateAt(orderUtil.getCurrentDate());
		application.setOrderNo($orderNo);
		application.setBuyerId($order.getBuyerId());
		application.setWeidianId($order.getWeidianId());
		application.setStatus(ApplicationFormStatus.REFUND_REQUESTING);
		application.setRefundReasonId(0L);
		application.setRefundTypeId(2L);

		// 生成退款维权申请单
		applicationFormService.insertAndGetId(application);

		sessionUtil.insert(application);

		// add 20150710
		
		// 发送退款事件
		msgSender.sendEvent(pay);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家撤销订单(付款后)-错误情况"
salience 10
	when
		$event: OrderCancelBySellerEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.sendCheckedResponse($event, OrderFormStatus.TO_SHIPPED);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家修改价格"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderPriceChangeEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, status == OrderFormStatus.UNPAID, 
			$currentDate < nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
				
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);
		
		$order.setDisconntFee(orderUtil.calculateDiscount(orderDetailList, $event.getDisconntFee()));
		$order.setExpressFee($event.getExpressFee());
		
		// 重新计算订单总价
		$order.setTotalAmount(orderUtil.calculateTotalPrice($order, orderDetailList));
		
		// 修改入库
		orderFormService.updateTotalPrice($order);
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		// 更新Fact
		sessionUtil.update($order);
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "价格修改成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家修改价格-错误情况"
salience 10
	when
		$event: OrderPriceChangeEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.sendCheckedResponse($event, OrderFormStatus.UNPAID);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家修改价格(C2C)"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderPriceResetEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, status == OrderFormStatus.UNPAID, 
			$currentDate < nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
				
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);
		$order.setExpressFee($event.getExpressFee());
		
		// 计算并设置折扣
		boolean legalPrice = orderUtil.orderSetDiscount($event.getOrderPrice(), $order, orderDetailList);
		
		// 重新计算订单总价
		$order.setTotalAmount(orderUtil.calculateTotalPrice($order, orderDetailList));
		
		// 修改入库
		orderFormService.updateTotalPrice($order);
		
		// 更新Fact
		sessionUtil.update($order);
		
		// 判断本次修改价格是否大于原价
		if (legalPrice) {
			orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "卖家修改价格成功");
		} else {
			orderUtil.sendResponse($event, EventErrorCode.PRICE_MODIFY_ILLEGAL, "订单价格不能超过原价");
		}
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "卖家修改价格(C2C)-错误情况"
salience 10
	when
		$event: OrderPriceResetEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.sendCheckedResponse($event, OrderFormStatus.UNPAID);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家支付"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderPaidEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, status == OrderFormStatus.UNPAID, 
			$currentDate < nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.TO_SHIPPED;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, OrderFormStatus.UNPAID, "订单支付成功", OrderFormStatus.TO_SHIPPED,
			OrderEventType.PAID);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);

		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);

		// 改变订单状态				
		orderUtil.orderChangeStatus($order, OrderFormStatus.TO_SHIPPED, eventId);

		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);

		// 设置主订单付款ID
		String paymentIdList = $order.getPaymentIdList();
		if (paymentIdList != null && !paymentIdList.isEmpty()) {
			paymentIdList += ",";
		}else{
		    paymentIdList = "";
		}
		
		paymentIdList += $event.getPaymentIdList();
		
		$order.setPaymentIdList(paymentIdList);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(orderConfig.getCommodityDeliverWaitMax());
		$order.setNextStatusTime(orderUtil.getDateInFuture(orderConfig.getCommodityDeliverWaitMax()));
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		
		// 入主数据库
		orderFormService.updateStatusAndPaymentIdWithTime($order);
		
		// 更新Fact
		sessionUtil.update($order);
		
		// 回复RPB系统，确认已经处理了用户支付事件
		UserEvent response = new UserEvent();
		response.setType(PaymentEventType.BUYER_PAID);
		response.setOrderNo($orderNo);
		JSONObject responseBody = new JSONObject();
		responseBody.put("paymentId", $event.getPaymentIdList());
		response.setBody(responseBody);
		response.setTarget("rpb");
		response.setSource("osm");
		
		orderUtil.sendEvent(response);
		
		// 发送OSM事件
		orderUtil.sendUserEvent(OrderEventType.PAID, $orderNo);

		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "买家支付-错误情况"
salience 10
	when
		$event: OrderPaidEvent($orderNo: orderNo)
	then
		// 仅仅记录，如果有用户投诉，手工处理
		// 一般情况都是超时
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		logger.error("检测到 PaymentIdList=" + $event.getPaymentIdList() + " 超时支付，需要手工处理");
		
		// 回复RPB系统，确认已经处理了用户支付事件
		UserEvent response = new UserEvent();
		response.setType(PaymentEventType.BUYER_PAID);
		response.setOrderNo($orderNo);
		JSONObject responseBody = new JSONObject();
		responseBody.put("paymentId", $event.getPaymentIdList());
		response.setBody(responseBody);
		response.setTarget("rpb");
		response.setSource("osm");
		
		orderUtil.sendEvent(response);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "卖家发货"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderDeliveryEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, status == OrderFormStatus.TO_SHIPPED, 
			$currentDate < nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.SHIPPED;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "卖家发货", nextStatus,
			OrderEventType.DELIVER_GOOD);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(orderConfig.getCommodityCommitWaitMax());
		$order.setNextStatusTime(orderUtil.getDateInFuture(orderConfig.getCommodityCommitWaitMax()));

		// 快递单号	
		if ($event.getLogisticsBillId() != null &&
				!$event.getLogisticsBillId().isEmpty()){
			$order.setExpressInfoId($event.getLogisticsBillId());
		}
		
		// 入主数据库
		orderFormService.updateStatusAndLogisticsBillIdWithTime($order);
		
		sessionUtil.update($order);
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "卖家发货成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end



rule "卖家发货-错误情况"
salience 10
	when
		$event: OrderDeliveryEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.sendCheckedResponse($event, OrderFormStatus.TO_SHIPPED);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家超时未发货"
	when
		Clock($currentDate: currentDate)
		$order: OrderFormEntity($orderNo: orderNo, status == OrderFormStatus.TO_SHIPPED, 
			$currentDate > nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.CLOSED;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "卖家超时未发货", nextStatus,
			OrderEventType.UNDELIVERED_WITHIN_TIME);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		logger.info("[PaymentEvent] 退款给买家: " + $order.getTotalAmount() + "元");
		
		// 生成退款事件
		PaymentEvent pay = new PaymentEvent();
		pay.setType(PaymentEventType.REFUND);
		pay.setTotalAmount($order.getTotalAmount());
		pay.setPaymentIdList($order.getPaymentIdList());
		pay.setOrderNo($orderNo);
		pay.setOrderItemNo(null);
		
		// 生成通知事件
		UserEvent notification = new UserEvent();
		notification.setOrderNo($orderNo);
		notification.setOrderItemNo(null);
		notification.setType(OrderEventType.UNDELIVERED_WITHIN_TIME);
		notification.setSource("osm");
		notification.setTarget("osm_event_listener");

		// 记录退款响应需要进行的动作
		PaymentAction action = PaymentAction.create(pay.getType(),
			$order.getOrderNo(), null, $order.getPaymentIdList(), notification);
		sessionUtil.insert(action);
		// 缓存PaymentAction
		orderUtil.saveOrUpdatePaymentAction(action);
				
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(0L);
		$order.setNextStatusTime(orderUtil.getCurrentDate());
		
		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);

		// add 20150710
		ApplicationFormEntity application = new ApplicationFormEntity();
		application.setCreateAt(orderUtil.getCurrentDate());
		application.setOrderNo($orderNo);
		application.setBuyerId($order.getBuyerId());
		application.setWeidianId($order.getWeidianId());
		application.setStatus(ApplicationFormStatus.REFUND_REQUESTING);
		application.setRefundReasonId(0L);
		application.setRefundTypeId(2L);
		
		// 生成退款维权申请单
		applicationFormService.insertAndGetId(application);
		
		sessionUtil.insert(application);
		
		// add 20150710

		// 归还库存
		orderUtil.increaseStock($order);
		
		logger.error("红包归还开始----------");
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($order.getOrderNo);
	    // 更新现金券状态
		if (!orderUtil.setCouponStatus(orderDetailList, CashCouponStatus.OCCUPIED, $order.getGuideId())) {
		    logger.error("[" + drools.getRule().getName() + "] OrderNo=" +$orderNo + " 现金券状态变更错误：现金券不存在或状态不正确");
		}
		logger.error("红包归还结束----------");
		
		boolean flag=orderUtil.subtractScore($order); //还原买家积分
		logger.debug("还原积分状态"+ flag + " end"); 
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		
		// 发送退款事件
		msgSender.sendEvent(pay);
		                                                                       
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");

end


rule "买家确认收货"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderDeliveryConfirmEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, 
			status == OrderFormStatus.SHIPPED, 
			nextStatusTime > $currentDate)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.CONFIRM_RECEIPT;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "买家确认收货", nextStatus,
			OrderEventType.CONFIRM_RECEIPT);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(orderConfig.getOrderCloseWaitMax());
		$order.setNextStatusTime(orderUtil.getDateInFuture(orderConfig.getOrderCloseWaitMax()));

		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "买家确认收货");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家确认收货-错误情况"
salience 10
	when
		$event: OrderDeliveryConfirmEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.sendCheckedResponse($event, OrderFormStatus.SHIPPED);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家超时未确认收货"
	when
		Clock($currentDate: currentDate)
		$order: OrderFormEntity($orderNo: orderNo, status == OrderFormStatus.SHIPPED, 
			$currentDate > nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
    		
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.CONFIRM_RECEIPT;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "买家超时未确认收货", nextStatus,
			OrderEventType.UNCONFIRMED_RECEIPT_WITHIN_TIME);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(orderConfig.getOrderCloseWaitMax());
		$order.setNextStatusTime(orderUtil.getDateInFuture(orderConfig.getOrderCloseWaitMax()));

		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		orderUtil.sendUserEvent(OrderEventType.UNCONFIRMED_RECEIPT_WITHIN_TIME, $orderNo);

		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家评价"
salience 100
	when
		$event: OrderIsCommentEvent($orderNo: orderNo)
		$order: OrderFormEntity(orderNo == $orderNo, 
			status == OrderFormStatus.CONFIRM_RECEIPT)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
    	
    	// 更新评价状态
    	$order.setIsComment(1);
		orderFormService.updateIsComment($order);
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "买家评价成功");
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家评价-错误情况"
salience 10
	when
		$event: OrderIsCommentEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.sendResponse($event, EventErrorCode.REQUEST_ORDER_INVALID_STATUS, "订单已关闭，或已评价");
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "订单确认收货状态超时"
	when
		Clock($currentDate: currentDate)
		$order: OrderFormEntity($orderNo: orderNo, status == OrderFormStatus.CONFIRM_RECEIPT, 
			$currentDate > nextStatusTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		
		String currentStatus = $order.getStatus();
		String nextStatus = OrderFormStatus.CLOSED;
		
		OrderEventEntity entity = orderUtil.createOrderEventEntity(
			$orderNo, currentStatus, "订单确认收货状态超时", nextStatus,
			OrderEventType.CONFIRM_RECEIPT_STATUS_TIMEOUT);
		
		logger.info("[Status] " + currentStatus + " -> " + nextStatus);
		
		// logger.info("[PaymentEvent] 打款给卖家: " + $order.getTotalAmount() + "元");
		// 发送打款事件
		// PaymentEvent pay = new PaymentEvent();
		// pay.setType(PaymentEventType.PAYMENT);
		// pay.setTotalAmount($order.getTotalAmount());
		// pay.setPaymentIdList($order.getPaymentIdList());
		// pay.setWeidianId($order.getWeidianId());
		// pay.setOrderNo($orderNo);
		// pay.setOrderItemNo(null);

		// 记录退款响应需要进行的动作
		// PaymentAction action = PaymentAction.create(pay.getType(),
		// 	$order.getOrderNo(), null, $order.getPaymentIdList(), null);
		// 缓存PaymentAction
		// orderUtil.saveOrUpdatePaymentAction(action);
		// insert(action);
		
		// msgSender.sendEvent(pay);
		
		// 插入订单历史事件数据库
		int eventId = orderEventService.insertAndGetId(entity);
		
		// 改变订单状态
		orderUtil.orderChangeStatus($order, nextStatus, eventId);
		
		// 设置时间相关的项
		$order.setStatusHoldMs(orderConfig.getOrderCloseWaitMax());
		$order.setNextStatusTime(orderUtil.getDateInFuture(orderConfig.getOrderCloseWaitMax()));

		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		sessionUtil.update($order);

		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);	
		
		// C2C: 交易金额打款到导购的虚拟账户上
		orderUtil.orderPayToVirtualAccount($order, orderDetailList);

		
		// 买家获得积分
		orderUtil.buyerScoreObtain($order, orderDetailList);
		// 发送佣金待审核事件
		orderUtil.postCommission($order);

		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "订单关闭"
	when
		$order: OrderFormEntity($orderNo: orderNo, 
			status == OrderFormStatus.CLOSED)
		$orderDetailList: ArrayList()
			from collect(OrderDetailFormEntity(orderNo == $orderNo))
		$applicationList: ArrayList()
			from collect(ApplicationFormEntity(orderNo == $orderNo))
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
    		
    	// 生成通知事件
		OrderCloseEvent notification = new OrderCloseEvent();
    	// 若用户未评价，默认评价
		if ($order.getIsComment() != 1) {
			$order.setIsComment(1);
			orderFormService.updateIsComment($order);
			notification.setDefaultComm("1");
		} else {
			notification.setDefaultComm("0");
		}	
		notification.setOrderNo($orderNo);
		notification.setOrderItemNo(null);
		notification.setType(OrderEventType.ORDER_CLOSED);
		notification.setSource("osm");
		notification.setTarget("osm_event_listener");
		
		// 删除订单和子订单Fact
//		for (Object application: $applicationList) {
//			sessionUtil.delete(application);
//		}
		
		for (Object orderDetail: $orderDetailList) {
			sessionUtil.delete(orderDetail);
		}
		sessionUtil.delete($order);
		
		// 发送通知事件
		orderUtil.sendEvent(notification);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "买家申请退款"
salience 100
	when
		$event: OrderRefundRequestEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo,
			$refundAmount: refundAmount)
		$order: OrderFormEntity(orderNo == $orderNo, 
			totalAmount.compareTo($refundAmount) >= 0, (
			status == OrderFormStatus.TO_SHIPPED || 
			status == OrderFormStatus.SHIPPED || 
			status == OrderFormStatus.CONFIRM_RECEIPT))
		$orderDetail: OrderDetailFormEntity(orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.NORMAL)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
			
		ApplicationFormEntity application = $event.getApplicationForm();
		application.setCreateAt(orderUtil.getCurrentDate());
		application.setSellerTime(orderUtil.getDateInFuture(orderConfig.getSubOrderRefundWaitMax()));
		application.setStatus(ApplicationFormStatus.REFUND_REQUESTING);
		
		// 生成退款维权申请单
		int applicationFormId = applicationFormService.insertAndGetId(application);
		
		// 停止计时
		orderUtil.stopOrderTimer($order);
		
		// 修改子订单信息
		$orderDetail.setStatus(OrderDetailFormStatus.TO_REFUND);
		$orderDetail.setRefundAmount($event.getRefundAmount());
		$orderDetail.setAppealId(applicationFormId);
		$orderDetail.setRefundTimes($orderDetail.getRefundTimes() + 1);
		
		// 订单入库
		orderFormService.updateStatusWithTime($order);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);
		
		sessionUtil.insert(application);
		sessionUtil.update($order);
		sessionUtil.update($orderDetail);
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "买家申请退款");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家申请退款-错误情况"
salience 10
	when
		$event: OrderRefundRequestEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
    		
		String[] requiredOrderStatus = {
			OrderFormStatus.TO_SHIPPED, 
			OrderFormStatus.SHIPPED, 
			OrderFormStatus.CONFIRM_RECEIPT
		};
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.NORMAL};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus,
			requiredOrderDetailStatus);
			
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "买家放弃退款"
salience 100
	when
		$event: OrderRefundCancelEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderNo == $orderNo,
			orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.TO_REFUND,
			$applicationFormId : appealId)
		$application: ApplicationFormEntity(id == $applicationFormId)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		
		// 退款维权申请：买家放弃退款
		$application.setStatus(ApplicationFormStatus.REFUND_CANNEL);
		applicationFormService.updateAll($application);
		
		// 恢复计时
		orderUtil.resumeOrderTimer($order);
			
		// 修改子订单信息
		$orderDetail.setStatus(OrderDetailFormStatus.NORMAL);
		$orderDetail.setRefundAmount(new BigDecimal(0));

		// 订单入库
		orderFormService.updateStatusWithTime($order);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);
		
		sessionUtil.update($application);
		sessionUtil.update($order);
		sessionUtil.update($orderDetail);
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "买家放弃退款成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "买家放弃退款-错误情况"
salience 10
	when
		$event: OrderRefundCancelEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		String[] requiredOrderStatus = null;
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.TO_REFUND};
		orderUtil.sendCheckedResponse($event, requiredOrderStatus, requiredOrderDetailStatus);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "卖家同意退款"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderRefundAcceptEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderNo == $orderNo,
			orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.TO_REFUND,
			$applicationFormId: appealId)
		$application: ApplicationFormEntity(id == $applicationFormId, $currentDate < sellerTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
	
		logger.info("[PaymentEvent] 退款给买家: " + $orderDetail.getRefundAmount() + "元");
		// 生成退款事件
		PaymentEvent pay = new PaymentEvent();
		pay.setType(PaymentEventType.REFUND);
		pay.setTotalAmount($orderDetail.getRefundAmount());
		pay.setPaymentIdList($order.getPaymentIdList());
		pay.setOrderNo($orderNo);
		pay.setOrderItemNo($orderItemNo);
		
		// 记录退款响应需要进行的动作
		PaymentAction action = PaymentAction.create(pay.getType(),
			$orderNo, $orderItemNo, $orderDetail.getPaymentIdList(), 
			$event.buildResponseEvent(
			EventErrorCode.SUCCESS, "卖家同意退款"));
		// 缓存PaymentAction
		orderUtil.saveOrUpdatePaymentAction(action);
		sessionUtil.insert(action);
		
		// 更新子订单
		$orderDetail.setIsRefunded(1);
		$orderDetail.setStatus(OrderDetailFormStatus.CLOSED);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);
		
		sessionUtil.update($orderDetail);
		
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);
		
		// 重新计算订单总价
		$order.setTotalAmount(orderUtil.calculateTotalPrice($order, orderDetailList));
		orderFormService.updateTotalPrice($order);
		
		boolean needClose = true;
		boolean needResumeTiming = true;
		for (Object obj : orderDetailList) {
			OrderDetailFormEntity detail = (OrderDetailFormEntity)obj;
			// 如果维权或退款中，则不关闭订单
			if (detail.getStatus() != OrderDetailFormStatus.CLOSED) {
				needClose = false;
				
				if (detail.getStatus() != OrderDetailFormStatus.NORMAL) {
					needResumeTiming = false;
				}
			}
		}
		
		// 关闭订单
		if (needClose) {
			String currentStatus = $order.getStatus();
			String nextStatus = OrderFormStatus.CLOSED;
			
			OrderEventEntity entity = orderUtil.createOrderEventEntity(
				$orderNo, currentStatus, "卖家同意退款", nextStatus,
				OrderEventType.AGREE_APPLY_REFUND);
			
			logger.info("[Status] " + currentStatus + " -> " + nextStatus);
			
			// 插入订单历史事件数据库
			int eventId = orderEventService.insertAndGetId(entity);
			
			// 改变订单状态
			orderUtil.orderChangeStatus($order, nextStatus, eventId);
			
			// 设置时间相关的项
			$order.setStatusHoldMs(0L);
			$order.setNextStatusTime(orderUtil.getCurrentDate());
		}else if (needResumeTiming) {
			// 恢复计时
			orderUtil.resumeOrderTimer($order);
		}
		
		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		// 更新退款申请
		$application.setStatus(ApplicationFormStatus.REFUNDED);
		$application.setSellerTime(orderUtil.getCurrentDate());
		
		applicationFormService.updateAll($application);
		
		sessionUtil.update($application);
		
		// 归还库存(只有没发货，才能恢复库存)
		if ($order.getStatus() == OrderFormStatus.TO_SHIPPED ||
			$order.getStatus() == OrderFormStatus.UNPAID) {
			orderUtil.increaseStock($orderDetail);
		}
		//记录日志
		//logger.debug("{"+new JSONArray().fromObject(orderUtil.setLogEntityInfo($order)).toString() +"}");	
		// 发送退款事件
		msgSender.sendEvent(pay);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家同意退款-错误情况"
salience 10
	when
		$event: OrderRefundAcceptEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		String[] requiredOrderStatus = null;
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.TO_REFUND};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus, requiredOrderDetailStatus);
			
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家在买家维权后同意退款"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderAdultsRefundAcceptEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderNo == $orderNo,
			orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.ON_ADULTS,
			$applicationFormId: appealId)
		$application: ApplicationFormEntity(id == $applicationFormId,
			status ==  ApplicationFormStatus.APPEAL_REQUESTING)
		$applicationHistoryList: ArrayList()
			from collect(ApplicationFormEntity(orderItemNo == $orderItemNo,
			status ==  ApplicationFormStatus.REFUND_REFUSED))
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
	
		logger.info("[PaymentEvent] 退款给买家: " + $orderDetail.getRefundAmount() + "元");
		// 生成退款事件
		PaymentEvent pay = new PaymentEvent();
		pay.setType(PaymentEventType.REFUND);
		pay.setTotalAmount($orderDetail.getRefundAmount());
		pay.setPaymentIdList($order.getPaymentIdList());
		pay.setOrderNo($orderNo);
		pay.setOrderItemNo($orderItemNo);
		
		// 记录退款响应需要进行的动作
		PaymentAction action = PaymentAction.create(pay.getType(),
			$orderNo, $orderItemNo, $orderDetail.getPaymentIdList(), 
			$event.buildResponseEvent(
			EventErrorCode.SUCCESS, "卖家在买家维权后同意退款"));
		// 缓存PaymentAction
		orderUtil.saveOrUpdatePaymentAction(action);
		sessionUtil.insert(action);
		
		// 更新子订单
		$orderDetail.setIsRefunded(1);
		$orderDetail.setStatus(OrderDetailFormStatus.CLOSED);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);
		
		sessionUtil.update($orderDetail);
		
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);
		
		// 重新计算订单总价
		$order.setTotalAmount(orderUtil.calculateTotalPrice($order, orderDetailList));
		orderFormService.updateTotalPrice($order);
		
		boolean needClose = true;
		boolean needResumeTiming = true;
		for (Object obj : orderDetailList) {
			OrderDetailFormEntity detail = (OrderDetailFormEntity)obj;
			// 如果维权或退款中，则不关闭订单
			if (detail.getStatus() != OrderDetailFormStatus.CLOSED) {
				needClose = false;
				
				if (detail.getStatus() != OrderDetailFormStatus.NORMAL) {
					needResumeTiming = false;
				}
			}
		}
		
		// 关闭订单
		if (needClose) {
			String currentStatus = $order.getStatus();
			String nextStatus = OrderFormStatus.CLOSED;
			
			OrderEventEntity entity = orderUtil.createOrderEventEntity(
				$orderNo, currentStatus, "卖家同意退款", nextStatus,
				OrderEventType.AGREE_APPLY_REFUND);
			
			logger.info("[Status] " + currentStatus + " -> " + nextStatus);
			
			// 插入订单历史事件数据库
			int eventId = orderEventService.insertAndGetId(entity);
			
			// 改变订单状态
			orderUtil.orderChangeStatus($order, nextStatus, eventId);
			
			// 设置时间相关的项
			$order.setStatusHoldMs(0L);
			$order.setNextStatusTime(orderUtil.getCurrentDate());
		}else if (needResumeTiming) {
			// 恢复计时
			orderUtil.resumeOrderTimer($order);
		}
		
		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		// 更新维权申请
		$application.setAppealResult(ApplicationFormStatus.APPEAL_ENDED_BY_REFUNDING_RESULT);
		$application.setAgentComment(ApplicationFormStatus.APPEAL_ENDED_BY_REFUNDING_RESULT);
		$application.setStatus(ApplicationFormStatus.APPEALED);
		$application.setAgentCreateAt(orderUtil.getCurrentDate());
		$application.setEndAt(orderUtil.getCurrentDate());
		
		applicationFormService.updateAll($application);
		
		sessionUtil.update($application);
		
		//更新历史退款申请(只更新上一条被卖家拒绝的退款)
		ApplicationFormEntity appLastOne = orderUtil.getLastRefundRefusedApplicationForm($applicationHistoryList);
		appLastOne.setStatus(ApplicationFormStatus.REFUNDED);
		appLastOne.setSellerTime(orderUtil.getCurrentDate());
		
		applicationFormService.updateAll(appLastOne);
		
		sessionUtil.update(appLastOne);
				
		// 归还库存(只有没发货，才能恢复库存)
		if ($order.getStatus() == OrderFormStatus.TO_SHIPPED ||
			$order.getStatus() == OrderFormStatus.UNPAID) {
			orderUtil.increaseStock($orderDetail);
		}
		
		// 发送退款事件
		msgSender.sendEvent(pay);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家在买家维权后同意退款-错误情况"
salience 10
	when
		$event: OrderAdultsRefundAcceptEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		String[] requiredOrderStatus = null;
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.ON_ADULTS};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus, requiredOrderDetailStatus);
			
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家超时未拒绝退款"
	when
		Clock($currentDate: currentDate)
		$application: ApplicationFormEntity($orderNo: orderNo, $orderItemNo: orderItemNo,
			$currentDate > sellerTime,
			status == ApplicationFormStatus.REFUND_REQUESTING)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.TO_REFUND)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
			
		// 更新退款申请
		$application.setStatus(ApplicationFormStatus.REFUNDED);
		$application.setSellerTime(orderUtil.getCurrentDate());
		
		applicationFormService.updateAll($application);
		
		sessionUtil.update($application);
	
		logger.info("[PaymentEvent] 退款给买家: " + $orderDetail.getRefundAmount() + "元");
		
		// 生成退款事件
		PaymentEvent pay = new PaymentEvent();
		pay.setType(PaymentEventType.REFUND);
		pay.setTotalAmount($orderDetail.getRefundAmount());
		pay.setPaymentIdList($order.getPaymentIdList());
		pay.setOrderNo($orderNo);
		pay.setOrderItemNo($orderItemNo);

		// 生成通知事件
		UserEvent notification = new UserEvent();
		notification.setOrderNo($orderNo);
		notification.setOrderItemNo(null);
		notification.setType(OrderEventType.UNREFUSED_APPLY_REFUND_WITHIN_TIME);
		notification.setSource("osm");
		notification.setTarget("osm_event_listener");
		JSONObject notificationBody = new JSONObject();
		notificationBody.put("applicationFormId", $application.getId());
		notification.setBody(notificationBody);
		
		// 记录退款响应需要进行的动作
		PaymentAction action = PaymentAction.create(pay.getType(),
			$orderNo, $orderItemNo, $orderDetail.getPaymentIdList(), 
			notification);
		// 缓存PaymentAction
		orderUtil.saveOrUpdatePaymentAction(action);
		sessionUtil.insert(action);
		
		// 更新子订单
		$orderDetail.setIsRefunded(1);
		$orderDetail.setStatus(OrderDetailFormStatus.CLOSED);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);
		
		sessionUtil.update($orderDetail);
		
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);
		
		// 重新计算订单总价
		$order.setTotalAmount(orderUtil.calculateTotalPrice($order, orderDetailList));
		orderFormService.updateTotalPrice($order);
		
		boolean needClose = true;
		boolean needResumeTiming = true;
		for (Object obj : orderDetailList) {
			OrderDetailFormEntity detail = (OrderDetailFormEntity)obj;
			// 如果维权或退款中，则不关闭订单
			if (detail.getStatus() != OrderDetailFormStatus.CLOSED) {
				needClose = false;
				
				if (detail.getStatus() != OrderDetailFormStatus.NORMAL) {
					needResumeTiming = false;
				}
			}
		}
		
		// 关闭订单
		if (needClose) {
			String currentStatus = $order.getStatus();
			String nextStatus = OrderFormStatus.CLOSED;
			
			OrderEventEntity entity = orderUtil.createOrderEventEntity(
				$orderNo, currentStatus, "退款等待超时", nextStatus,
				OrderEventType.UNREFUSED_APPLY_REFUND_WITHIN_TIME);
			
			logger.info("[Status] " + currentStatus + " -> " + nextStatus);
			
			// 插入订单历史事件数据库
			int eventId = orderEventService.insertAndGetId(entity);
			
			// 改变订单状态
			orderUtil.orderChangeStatus($order, nextStatus, eventId);
			
			// 设置时间相关的项
			$order.setStatusHoldMs(0L);
			$order.setNextStatusTime(orderUtil.getCurrentDate());
		}else if (needResumeTiming) {
			// 恢复计时
			orderUtil.resumeOrderTimer($order);
		}
		
		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		// 归还库存(只有没发货，才能恢复库存)
		if ($order.getStatus() == OrderFormStatus.TO_SHIPPED ||
			$order.getStatus() == OrderFormStatus.UNPAID) {
			orderUtil.increaseStock($orderDetail);
		}
		
		// 发送退款事件
		msgSender.sendEvent(pay);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end



rule "卖家拒绝退款"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: OrderRefundRefuseEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.TO_REFUND,
			$applicationFormId: appealId)
		$application: ApplicationFormEntity(id == $applicationFormId, $currentDate < sellerTime)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		// 更新退款申请
		$application.setStatus(ApplicationFormStatus.REFUND_REFUSED);
		$application.setSellerTime(orderUtil.getCurrentDate());
		$application.setRejectReason($event.getRejectReason());
		
		applicationFormService.updateAll($application);
		
		sessionUtil.update($application);
		
		// 更新子订单
		$orderDetail.setStatus(OrderDetailFormStatus.NORMAL);
		orderDetailFormService.updateStatus($orderDetail);
		
		sessionUtil.update($orderDetail);
		
		boolean needResumeTiming = true;
		for (Object obj : orderUtil.queryGetOrderDetailList($orderNo)) {
			OrderDetailFormEntity detail = (OrderDetailFormEntity)obj;

			if (detail.getStatus() != OrderDetailFormStatus.CLOSED && 
				detail.getStatus() != OrderDetailFormStatus.NORMAL) {
					needResumeTiming = false;
			}
		}
		
		if (needResumeTiming) {
			// 恢复计时
			orderUtil.resumeOrderTimer($order);
			// 入主数据库
			orderFormService.updateStatusWithTime($order);
			
			sessionUtil.update($order);
		}
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "卖家拒绝退款成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "卖家拒绝退款-错误情况"
salience 10
	when
		$event: OrderRefundRefuseEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		String[] requiredOrderStatus = null;
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.TO_REFUND};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus, requiredOrderDetailStatus);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "买家申请维权"
salience 100
	when
		$event: OrderAppealRequestEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo && (
			status == OrderFormStatus.TO_SHIPPED || 
			status == OrderFormStatus.SHIPPED || 
			status == OrderFormStatus.CONFIRM_RECEIPT))
		$orderDetail: OrderDetailFormEntity($applicationFormId: appealId,
			orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.NORMAL,
			refundTimes > 0,
			isJudged == 0)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");

		ApplicationFormEntity application = $event.getApplicationForm();
		application.setCreateAt(orderUtil.getCurrentDate());
		application.setStatus(ApplicationFormStatus.APPEAL_REQUESTING);
		application.setAgentCreateAt(orderUtil.getDateInFuture(
			orderConfig.getOfficialJudgementWaitMax()));
		
		// 生成退款维权申请单
		int appealId = applicationFormService.insertAndGetId(application);
		
		applicationFormService.updateAll(application);
		sessionUtil.insert(application);
		
		// 停止计时
		orderUtil.stopOrderTimer($order);

		// 修改子订单信息
		$orderDetail.setAppealId(appealId);
		$orderDetail.setStatus(OrderDetailFormStatus.ON_ADULTS);
		$orderDetail.setAppealTimes($orderDetail.getAppealTimes() + 1);
		
		// 订单入库
		orderFormService.updateStatusWithTime($order);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);
		sessionUtil.update($order);
		sessionUtil.update($orderDetail);
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "买家申请维权成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "买家申请维权-错误情况"
salience 10
	when
		$event: OrderAppealRequestEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
    			
		String[] requiredOrderStatus = {
			OrderFormStatus.TO_SHIPPED, 
			OrderFormStatus.SHIPPED, 
			OrderFormStatus.CONFIRM_RECEIPT
		};
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.NORMAL};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus, 
			requiredOrderDetailStatus);
			
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "买家放弃维权"
salience 100
	when
		$event: OrderAppealCancelEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderNo == $orderNo,
			orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.ON_ADULTS,
			$applicationFormId: appealId)
		$application: ApplicationFormEntity(id == $applicationFormId)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		
		// 更新退款申请
		$application.setStatus(ApplicationFormStatus.APPEAL_CANCEL);
		$application.setAppealResult("用户放弃了维权。");
		$application.setEndAt(orderUtil.getCurrentDate());
		
		applicationFormService.updateAll($application);		
		sessionUtil.update($application);
		
		// 更新子订单
		$orderDetail.setStatus(OrderDetailFormStatus.NORMAL);
		orderDetailFormService.updateStatus($orderDetail);

		sessionUtil.update($orderDetail);
		
		boolean needResumeTiming = true;
		for (Object obj : orderUtil.queryGetOrderDetailList($orderNo)) {
			OrderDetailFormEntity detail = (OrderDetailFormEntity)obj;

			if (detail.getStatus() != OrderDetailFormStatus.CLOSED && 
				detail.getStatus() != OrderDetailFormStatus.NORMAL) {
					needResumeTiming = false;
			}
		}
		
		if (needResumeTiming) {
			// 恢复计时
			orderUtil.resumeOrderTimer($order);
			// 入主数据库
			orderFormService.updateStatusWithTime($order);
			
			sessionUtil.update($order);
		}
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "买家放弃维权成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "买家放弃维权-错误情况"
salience 10
	when
		$event: OrderAppealCancelEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		String[] requiredOrderStatus = null;
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.ON_ADULTS};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus, requiredOrderDetailStatus);
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "维权官方介入冷却时间结束"
	when
		Clock($currentDate: currentDate)
		$application: ApplicationFormEntity(
			$orderNo: orderNo, $orderItemNo: orderItemNo, 
			status == ApplicationFormStatus.APPEAL_REQUESTING,
			$currentDate > agentCreateAt)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		$application.setStatus(ApplicationFormStatus.APPEALING);
		$application.setAgentComment("官方将与您电话联系，以便核实商品情况，请保持手机通畅。");
		
		applicationFormService.updateAll($application);		
		sessionUtil.update($application);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "客服判定不退款"
salience 100
	when
		$event: OrderJudgeNoRefundEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderNo == $orderNo,
			orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.ON_ADULTS,
			$applicationFormId: appealId)
		$application: ApplicationFormEntity(id == $applicationFormId,
			status == ApplicationFormStatus.APPEALING)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");

		// 更新退款申请
		$application.setAppealResult($event.getAppealResult());
		$application.setAgentComment($event.getAgentComment());
		$application.setStatus(ApplicationFormStatus.APPEALED);
		$application.setAgentCreateAt(orderUtil.getCurrentDate());
		$application.setEndAt(orderUtil.getCurrentDate());
		
		applicationFormService.updateAll($application);
		
		sessionUtil.update($application);
		
		// 更新子订单
		$orderDetail.setIsJudged(1);
		$orderDetail.setStatus(OrderDetailFormStatus.NORMAL);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);

		sessionUtil.update($orderDetail);
		
		boolean needResumeTiming = true;
		for (Object obj : orderUtil.queryGetOrderDetailList($orderNo)) {
			OrderDetailFormEntity detail = (OrderDetailFormEntity)obj;

			if (detail.getStatus() != OrderDetailFormStatus.CLOSED && 
				detail.getStatus() != OrderDetailFormStatus.NORMAL) {
					needResumeTiming = false;
			}
		}
		
		if (needResumeTiming) {
			// 恢复计时
			orderUtil.resumeOrderTimer($order);
			// 入主数据库
			orderFormService.updateStatusWithTime($order);
			
			sessionUtil.update($order);
		}
		
		orderUtil.sendResponse($event, EventErrorCode.SUCCESS, "客服判定不退款成功");
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "客服判定不退款-错误情况"
salience 10
	when
		$event: OrderJudgeNoRefundEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		String[] requiredOrderStatus = null;
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.ON_ADULTS};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus, requiredOrderDetailStatus);
			
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "客服判定退款"
salience 100
	when
		$event: OrderJudgeRefundEvent($orderNo: orderNo, 
			$orderItemNo: orderItemNo)
		$order: OrderFormEntity(orderNo == $orderNo)
		$orderDetail: OrderDetailFormEntity(orderNo == $orderNo,
			orderItemNo == $orderItemNo,
			status == OrderDetailFormStatus.ON_ADULTS,
			$applicationFormId: appealId)
		$application: ApplicationFormEntity(id == $applicationFormId,
			status == ApplicationFormStatus.APPEALING)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");

		// 更新退款申请
		$application.setStatus(ApplicationFormStatus.APPEALED);
		$application.setAgentCreateAt(orderUtil.getCurrentDate());
		$application.setEndAt(orderUtil.getCurrentDate());
		
		applicationFormService.updateAll($application);
		
		sessionUtil.update($application);
		
		logger.info("[PaymentEvent] 退款给买家: " + $orderDetail.getRefundAmount() + "元");
		// 生成退款事件
		PaymentEvent pay = new PaymentEvent();
		pay.setType(PaymentEventType.REFUND);
		pay.setTotalAmount($orderDetail.getRefundAmount());
		pay.setPaymentIdList($order.getPaymentIdList());
		pay.setOrderNo($orderNo);
		pay.setOrderItemNo($orderItemNo);
		
		// 记录退款响应需要进行的动作
		PaymentAction action = PaymentAction.create(pay.getType(),
			$orderNo, $orderItemNo, $orderDetail.getPaymentIdList(), 
			$event.buildResponseEvent(EventErrorCode.SUCCESS, "客服判定退款"));
		// 缓存PaymentAction
		orderUtil.saveOrUpdatePaymentAction(action);
		sessionUtil.insert(action);
			
		// 更新子订单
		$orderDetail.setIsJudged(1);
		$orderDetail.setIsRefunded(1);
		$orderDetail.setStatus(OrderDetailFormStatus.CLOSED);
		orderDetailFormService.updateStatusRefundAdult($orderDetail);
		
		sessionUtil.update($orderDetail);
		
		OrderDetailFormEntity[] orderDetailList = orderUtil.queryGetOrderDetailList($orderNo);
		
		// 重新计算订单总价
		$order.setTotalAmount(orderUtil.calculateTotalPrice($order, orderDetailList));
		orderFormService.updateTotalPrice($order);
		
		boolean needClose = true;
		boolean needResumeTiming = true;
		for (Object obj : orderDetailList) {
			OrderDetailFormEntity detail = (OrderDetailFormEntity)obj;
			// 如果维权或退款中，则不关闭订单
			if (detail.getStatus() != OrderDetailFormStatus.CLOSED) {
				needClose = false;
				
				if (detail.getStatus() != OrderDetailFormStatus.NORMAL) {
					needResumeTiming = false;
				}
			}
		}
		
		// 关闭订单
		if (needClose) {
			String currentStatus = $order.getStatus();
			String nextStatus = OrderFormStatus.CLOSED;
			
			OrderEventEntity entity = orderUtil.createOrderEventEntity(
				$orderNo, currentStatus, "客服判定退款", nextStatus,
				OrderEventType.JUDGE_REFUND);
			
			logger.info("[Status] " + currentStatus + " -> " + nextStatus);
			
			// 插入订单历史事件数据库
			int eventId = orderEventService.insertAndGetId(entity);
			
			// 改变订单状态
			orderUtil.orderChangeStatus($order, nextStatus, eventId);
			
			// 设置时间相关的项
			$order.setStatusHoldMs(0L);
			$order.setNextStatusTime(orderUtil.getCurrentDate());
		}else if (needResumeTiming) {
			// 恢复计时
			orderUtil.resumeOrderTimer($order);
		}
		
		// 入主数据库
		orderFormService.updateStatusWithTime($order);
		
		sessionUtil.update($order);
		
		// 归还库存(只有没发货，才能恢复库存)
		if ($order.getStatus() == OrderFormStatus.TO_SHIPPED ||
			$order.getStatus() == OrderFormStatus.UNPAID) {
			orderUtil.increaseStock($orderDetail);
		}
		
		// 发送退款事件
		msgSender.sendEvent(pay);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "客服判定退款-错误情况"
salience 10
	when
		$event: OrderJudgeRefundEvent($orderNo: orderNo, 
			$orderItemNo :orderItemNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
		String[] requiredOrderStatus = null;
		String[] requiredOrderDetailStatus = {OrderDetailFormStatus.ON_ADULTS};
		orderUtil.sendCheckedResponse($event, 
			requiredOrderStatus, requiredOrderDetailStatus);
			
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end

rule "收到付款/退款单ID"
salience 100
	when
		Clock($currentDate: currentDate)
		$event: PaymentResponseEvent($orderNo: orderNo, $orderItemNo: orderItemNo)
		$action: PaymentAction(orderNo == $orderNo, orderItemNo == $orderItemNo)
		$application: ApplicationFormEntity(orderNo == $orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");

		String paymentIdList = $action.getPaymentIdList();
		if (paymentIdList == null ||
			paymentIdList.isEmpty()) {
			paymentIdList = $event.getPaymentIdList();
		} else {
			paymentIdList += ("," + $event.getPaymentIdList());
		}
		
		if ($action.getOrderItemNo() == null) {
			// 更新大单 PaymentId
			orderFormService.updatePaymentIdByOrderNum($orderNo, paymentIdList);
		}else {
			// 更新小单 PaymentId
			orderDetailFormService.updatePaymentIdByOrderNum($orderItemNo, paymentIdList);
		}
		
		// add 20150710
		
		$application.setSellerTime(orderUtil.getCurrentDate());
		$application.setStatus(ApplicationFormStatus.REFUNDED);
		applicationFormService.updateAll($application);
		
		sessionUtil.delete($application);
		
		// add 20150710
		
		if ($action.getEvent() != null) {
			orderUtil.sendEvent($action.getEvent());
		}
		
		sessionUtil.delete($action);
		// 删除PaymentAction的缓存数据
		orderUtil.dropPaymentAction($orderNo, $orderItemNo);
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "收到付款/退款单ID-备份"
salience 50
	when
		$event: PaymentResponseEvent($orderNo: orderNo, $orderItemNo: orderItemNo)
		$actionList: ArrayList() from collect(PaymentAction())
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " OrderItemNo=" + $orderItemNo + " 开始...");
    		
    	logger.info("PaymentAction List ...");
    	
    	for (Object obj: $actionList) {
    		logger.info(obj.toString());
    	}
			
		if ($orderItemNo == null) {
			logger.error("子订单为空？？查看下大订单！");
			
			// 子订单为空
			OrderFormEntity order = orderFormService.selectByOrderNum($orderNo);
			
			if (order == null){
				logger.error("不存在订单 OrderNum=" + $orderNo);
				return;
			}
			
			String paymentId = order.getPaymentIdList();
			if (paymentId == null ||
				paymentId.isEmpty()) {
				paymentId = $event.getPaymentIdList();
			} else {
				paymentId += ("," + $event.getPaymentIdList());
			}
			// 更新大单 PaymentId
			orderFormService.updatePaymentIdByOrderNum($orderNo, paymentId);
		}else{
			logger.info("查找特定的子订单！！！");
			
			OrderDetailFormEntity orderDetail = orderDetailFormService.selectByOrderNum($orderItemNo);
			if (orderDetail == null) {
				logger.info("不存在子订单 OrderNum=" + $orderItemNo);
				return;
			}
			
			String paymentId = orderDetail.getPaymentIdList();
			if (paymentId == null ||
				paymentId.isEmpty()) {
				paymentId = $event.getPaymentIdList();
			} else {
				paymentId += ("," + $event.getPaymentIdList());
			}
			
			// 更新小单 PaymentId
			orderDetailFormService.updatePaymentIdByOrderNum($orderItemNo, paymentId);
		}
		
		logger.debug("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 结束.");
end


rule "重新载入订单数据-调试"
salience 10
	when
		OrderReloadEvent($orderNo: orderNo)
	then
		logger.info("[" + drools.getRule().getName() + "] OrderNo=" +
    		$orderNo + " 开始...");
		orderUtil.reloadOrder($orderNo);
end
