<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:b="http://www.springframework.org/schema/beans" xmlns="http://www.springframework.org/schema/security"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
            http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context.xsd  
            http://www.springframework.org/schema/tx  
            http://www.springframework.org/schema/tx/spring-tx.xsd  
            http://www.springframework.org/schema/jdbc  
            http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
            http://www.springframework.org/schema/mvc
			http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/security
			http://www.springframework.org/schema/security/spring-security.xsd">

    <global-method-security pre-post-annotations="enabled"  />
	<!-- Enable security, let the casAuthenticationEntryPoint handle all intercepted 
		urls. The CAS_FILTER needs to be in the right position within the filter 
		chain. -->
      
	<http entry-point-ref="casAuthenticationEntryPoint"
		auto-config="true">
		<intercept-url pattern="/interfaces/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<!-- <intercept-url pattern="/user/**" access="ROLE_CPS_INIT" /> -->
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
		<custom-filter position="CAS_FILTER" ref="casAuthenticationFilter"></custom-filter>
		<custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER" />
        <custom-filter ref="singleLogoutFilter" before="CAS_FILTER" />
	</http>

	<!-- Required for the casProcessingFilter, so define it explicitly set and 
		specify an Id Even though the authenticationManager is created by default 
		when namespace based config is used. -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="casAuthenticationProvider"></authentication-provider>
	</authentication-manager>

	<!-- This section is used to configure CAS. The service is the actual redirect 
		that will be triggered after the CAS login sequence. -->
	<b:bean id="serviceProperties" class="org.springframework.security.cas.ServiceProperties">
		<!-- //http://localhost:8088/SpringSecurity 具体应用
		// j_spring_cas_security_check spring的虚拟URL，此标志标识使用 CAS authentication
		upon return from CAS SSO login. -->
		<b:property name="service" value="${cas.clientLogin}"></b:property>
		<b:property name="sendRenew" value="false"></b:property>
	</b:bean>

	<!-- The CAS filter handles the redirect from the CAS server and starts 
		the ticket validation. -->
	<b:bean id="casAuthenticationFilter" class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<b:property name="authenticationManager" ref="authenticationManager"></b:property>
	</b:bean>

	<!-- The entryPoint intercepts all the CAS authentication requests. It redirects 
		to the CAS loginUrl for the CAS login page. -->
	<b:bean id="casAuthenticationEntryPoint" class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<!-- <b:property name="loginUrl" value="https://localhost:8443/cas/login"></b:property> -->
		<b:property name="loginUrl" value="${cas.server}/login"></b:property>
		<!-- //SSO登录地址 -->
		<b:property name="serviceProperties" ref="serviceProperties"></b:property>
	</b:bean>

	<!-- Handles the CAS ticket processing. -->
	<b:bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<b:property name="authenticationUserDetailsService" ref="authenticationUserDetailsService" />
		<b:property name="serviceProperties" ref="serviceProperties"></b:property>
		<b:property name="ticketValidator">
			<b:bean class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<!-- <b:constructor-arg index="0" value="https://localhost:8443/cas" /> -->
				<b:constructor-arg index="0" value="${cas.server}" />
				<!-- //SSO验证地址 -->
			</b:bean>
		</b:property>
		<b:property name="key" value="cas"></b:property>
	</b:bean>
	
	<!-- <b:bean id="_userDetailServiceImpl" class="base.security.UserDetailServiceImpl"></b:bean> -->
	
	<!-- authorities对应 CAS server的 登录属性， 在此设置到spirng security中，用于spring security的验证 -->
	<b:bean id="authenticationUserDetailsService"
		class="base.security.CollectionGrantedAuthorityFromAssertionAttributesUserDetailsService">
		<b:constructor-arg>
			<b:array>
				<b:value>authorities</b:value>
			</b:array>
		</b:constructor-arg>
	</b:bean>

	<!-- 注销客户端 -->
	<b:bean id="singleLogoutFilter" class="org.jasig.cas.client.session.SingleSignOutFilter" />

	<!-- 注销服务器端 -->
	<b:bean id="requestSingleLogoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<!-- <b:constructor-arg value="https://localhost:8443/cas/logout" /> -->
		<b:constructor-arg value="${cas.server}/logout" />
		<b:constructor-arg>
			<b:bean	class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</b:constructor-arg>
		<b:property name="filterProcessesUrl" value="/j_spring_cas_security_logout" />
	</b:bean>
    
	<!-- <b:bean id="authenticationUserDetailsService" class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">  
        <b:property name="userDetailsService" ref="userDetailsManager"/>  
	</b:bean> -->

	<!-- <b:bean id="authenticationUserDetailsService" class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">    
        <b:property name="userDetailsService" >
            <b:ref bean="_userDetailServiceImpl" />    
        </b:property>    
    </b:bean> -->
</b:beans>
