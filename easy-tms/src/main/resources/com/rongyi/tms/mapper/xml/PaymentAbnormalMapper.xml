<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.rongyi.tms.mapper.xml.PaymentAbnormalMapper">
	<resultMap id="BaseResultMap" type="com.rongyi.easy.tms.entity.PaymentAbnormal">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="user_account" property="userAccount" jdbcType="VARCHAR" />
		<result column="order_no" property="orderNo" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="SMALLINT" />
		<result column="is_paid" property="isPaid" jdbcType="BIT" />
		<result column="amount" property="amount" jdbcType="DECIMAL" />
		<result column="checked_by" property="checkedBy" jdbcType="VARCHAR" />
		<result column="check_at" property="checkAt" jdbcType="TIMESTAMP" />
		<result column="payment_type" property="paymentType" jdbcType="SMALLINT" />
		<result column="payment_account" property="paymentAccount"
			jdbcType="VARCHAR" />
		<result column="payment_name" property="paymentName" jdbcType="VARCHAR" />
		<result column="payment_bank" property="paymentBank" jdbcType="VARCHAR" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="create_user" property="createUser" jdbcType="VARCHAR" />
		<result column="is_deleted" property="isDeleted" jdbcType="BIT" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.rongyi.easy.tms.entity.PaymentAbnormal"
		extends="BaseResultMap">
		<result column="remarks" property="remarks"
			typeHandler="com.rongyi.core.common.util.ConvertBlobTypeHandler" />
	</resultMap>
	<resultMap id="AbnormalVOMap" type="com.rongyi.tms.moudle.vo.AbnormalVO">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="id_no" property="idNo" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="VARCHAR" />
		<result column="user_account" property="userAccount" jdbcType="VARCHAR" />
		<result column="order_no" property="orderNo" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="SMALLINT" />
		<result column="is_paid" property="isPaid" jdbcType="BIT" />
		<result column="amount" property="amount" jdbcType="DECIMAL" />
		<result column="checked_by" property="checkedBy" jdbcType="VARCHAR" />
		<result column="check_at" property="checkAt" jdbcType="TIMESTAMP" />
		<result column="payment_type" property="paymentType" jdbcType="SMALLINT" />
		<result column="payment_account" property="paymentAccount"
			jdbcType="VARCHAR" />
		<result column="payment_name" property="paymentName" jdbcType="VARCHAR" />
		<result column="payment_bank" property="paymentBank" jdbcType="VARCHAR" />
		<result column="create_at" property="createAt" jdbcType="TIMESTAMP" />
		<result column="create_user" property="createUser" jdbcType="VARCHAR" />
		<result column="remarks" property="remarks"
			typeHandler="com.rongyi.core.common.util.ConvertBlobTypeHandler" />
	</resultMap>
	<sql id="Base_Column_List">
		id, user_id, user_account, order_no, status, is_paid, amount, checked_by,
		check_at,
		payment_type, payment_account, payment_name, payment_bank, create_at, create_user,
		is_deleted
	</sql>
	<sql id="Blob_Column_List">
		remarks
	</sql>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<select id="countAll" resultType="int" parameterType="java.util.Map">
		select
		count(1)
		from payment_abnormal
		where is_deleted = 0 and status in
		<foreach collection="status" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
		<if test="id != null">
			and id=#{id,jdbcType=INTEGER}
		</if>
		<if test="start != null">
			and create_at >= #{start,jdbcType=TIMESTAMP}
		</if>
		<if test="end != null">
			and create_at &lt;= #{end,jdbcType=TIMESTAMP}
		</if>
		<if test="amountStart != null">
			and amount >= #{amountStart,jdbcType=DECIMAL}
		</if>
		<if test="amountEnd != null and amountEnd !=0">
			and amount &lt;= #{amountEnd,jdbcType=DECIMAL}
		</if>
		<if test="orderNo != null">
			and order_no = #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test="paymentType != null">
			and payment_type = #{paymentType,jdbcType=SMALLINT}
		</if>
		<if test="userAccount != null">
			and user_account = #{userAccount,jdbcType=VARCHAR}
		</if>
	</select>
	<select id="selectByPage" resultMap="AbnormalVOMap" parameterType="java.util.Map">
		select RIGHT(CONCAT('00000000000' ,CAST(id AS CHAR)), 11)  AS id_no, 
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" /> 
		from payment_abnormal
		where is_deleted = 0 and status in
		<foreach collection="status" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
		<if test="id != null">
			and id=#{id,jdbcType=INTEGER}
		</if>
		<if test="start != null">
			and create_at >= #{start,jdbcType=TIMESTAMP}
		</if>
		<if test="end != null">
			and create_at &lt;= #{end,jdbcType=TIMESTAMP}
		</if>
		<if test="amountStart != null">
			and amount >= #{amountStart,jdbcType=DECIMAL}
		</if>
		<if test="amountEnd != null and amountEnd !=0">
			and amount &lt;= #{amountEnd,jdbcType=DECIMAL}
		</if>
		<if test="orderNo != null">
			and order_no = #{orderNo,jdbcType=VARCHAR}
		</if>
		<if test="paymentType != null">
			and payment_type = #{paymentType,jdbcType=SMALLINT}
		</if>
		<if test="userAccount != null">
			and user_account = #{userAccount,jdbcType=VARCHAR}
		</if>
		order by ${orderBy}
		limit
		#{begin,jdbcType=INTEGER},#{size,jdbcType=INTEGER}
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update payment_abnormal
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.userId != null">
				user_id = #{record.userId,jdbcType=VARCHAR},
			</if>
			<if test="record.userAccount != null">
				user_account = #{record.userAccount,jdbcType=VARCHAR},
			</if>
			<if test="record.orderNo != null">
				order_no = #{record.orderNo,jdbcType=VARCHAR},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=SMALLINT},
			</if>
			<if test="record.isPaid != null">
				is_paid = #{record.isPaid,jdbcType=BIT},
			</if>
			<if test="record.amount != null">
				amount = #{record.amount,jdbcType=DECIMAL},
			</if>
			<if test="record.checkedBy != null">
				checked_by = #{record.checkedBy,jdbcType=VARCHAR},
			</if>
			<if test="record.checkAt != null">
				check_at = #{record.checkAt,jdbcType=TIMESTAMP},
			</if>
			<if test="record.paymentType != null">
				payment_type = #{record.paymentType,jdbcType=SMALLINT},
			</if>
			<if test="record.paymentAccount != null">
				payment_account = #{record.paymentAccount,jdbcType=VARCHAR},
			</if>
			<if test="record.paymentName != null">
				payment_name = #{record.paymentName,jdbcType=VARCHAR},
			</if>
			<if test="record.paymentBank != null">
				payment_bank = #{record.paymentBank,jdbcType=VARCHAR},
			</if>
			<if test="record.createAt != null">
				create_at = #{record.createAt,jdbcType=TIMESTAMP},
			</if>
			<if test="record.createUser != null">
				create_user = #{record.createUser,jdbcType=VARCHAR},
			</if>
			<if test="record.isDeleted != null">
				is_deleted = #{record.isDeleted,jdbcType=BIT},
			</if>
			<if test="record.remarks != null">
				remarks = #{record.remarks,jdbcType=VARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExampleWithBLOBs" parameterType="map">
		update payment_abnormal
		set id = #{record.id,jdbcType=INTEGER},
		user_id = #{record.userId,jdbcType=VARCHAR},
		user_account = #{record.userAccount,jdbcType=VARCHAR},
		order_no = #{record.orderNo,jdbcType=VARCHAR},
		status = #{record.status,jdbcType=SMALLINT},
		is_paid = #{record.isPaid,jdbcType=BIT},
		amount = #{record.amount,jdbcType=DECIMAL},
		checked_by = #{record.checkedBy,jdbcType=VARCHAR},
		check_at = #{record.checkAt,jdbcType=TIMESTAMP},
		payment_type = #{record.paymentType,jdbcType=SMALLINT},
		payment_account = #{record.paymentAccount,jdbcType=VARCHAR},
		payment_name = #{record.paymentName,jdbcType=VARCHAR},
		payment_bank = #{record.paymentBank,jdbcType=VARCHAR},
		create_at = #{record.createAt,jdbcType=TIMESTAMP},
		create_user = #{record.createUser,jdbcType=VARCHAR},
		is_deleted = #{record.isDeleted,jdbcType=BIT},
		remarks = #{record.remarks,jdbcType=VARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update payment_abnormal
		set id = #{record.id,jdbcType=INTEGER},
		user_id = #{record.userId,jdbcType=VARCHAR},
		user_account = #{record.userAccount,jdbcType=VARCHAR},
		order_no = #{record.orderNo,jdbcType=VARCHAR},
		status = #{record.status,jdbcType=SMALLINT},
		is_paid = #{record.isPaid,jdbcType=BIT},
		amount = #{record.amount,jdbcType=DECIMAL},
		checked_by = #{record.checkedBy,jdbcType=VARCHAR},
		check_at = #{record.checkAt,jdbcType=TIMESTAMP},
		payment_type = #{record.paymentType,jdbcType=SMALLINT},
		payment_account = #{record.paymentAccount,jdbcType=VARCHAR},
		payment_name = #{record.paymentName,jdbcType=VARCHAR},
		payment_bank = #{record.paymentBank,jdbcType=VARCHAR},
		create_at = #{record.createAt,jdbcType=TIMESTAMP},
		create_user = #{record.createUser,jdbcType=VARCHAR},
		is_deleted = #{record.isDeleted,jdbcType=BIT}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from payment_abnormal
		where id = #{id,jdbcType=INTEGER} and is_deleted = 0  
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from payment_abnormal
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.rongyi.tms.moudle.vo.AbnormalParam"
		useGeneratedKeys="true" keyProperty="id">
		insert into payment_abnormal (user_id, user_account, order_no,
		status, amount,
		payment_type,
		payment_account, payment_name, payment_bank,
		create_at, create_user, is_deleted,
		remarks)
		values (#{userId,jdbcType=VARCHAR}, #{userAccount,jdbcType=VARCHAR},
		#{orderNo,jdbcType=VARCHAR},
		0, #{amount,jdbcType=DECIMAL},
		#{paymentType,jdbcType=SMALLINT},
		#{paymentAccount,jdbcType=VARCHAR}, #{paymentName,jdbcType=VARCHAR}, #{paymentBank,jdbcType=VARCHAR},
		#{createAt,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR},
		0,
		#{remarks,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.rongyi.easy.tms.entity.PaymentAbnormal"
		useGeneratedKeys="true" keyProperty="id">
		insert into payment_abnormal
		<trim prefix="(" suffix=")" suffixOverrides=",">
			user_id,
			user_account,
			order_no,
			status,
			is_paid,
			amount,
			checked_by,
			check_at,
			payment_type,
			payment_account,
			payment_name,
			payment_bank,
			create_at,
			create_user,
			is_deleted,
			remarks,
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{userId,jdbcType=VARCHAR},
			#{userAccount,jdbcType=VARCHAR},
			#{orderNo,jdbcType=VARCHAR},
			#{status,jdbcType=SMALLINT},
			#{isPaid,jdbcType=BIT},
			#{amount,jdbcType=DECIMAL},
			#{checkedBy,jdbcType=VARCHAR},
			#{checkAt,jdbcType=TIMESTAMP},
			#{paymentType,jdbcType=SMALLINT},
			#{paymentAccount,jdbcType=VARCHAR},
			#{paymentName,jdbcType=VARCHAR},
			#{paymentBank,jdbcType=VARCHAR},
			#{createAt,jdbcType=TIMESTAMP},
			#{createUser,jdbcType=VARCHAR},
			#{isDeleted,jdbcType=BIT},
			#{remarks,jdbcType=VARCHAR},
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.rongyi.tms.moudle.vo.AbnormalParam">
		update payment_abnormal
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=VARCHAR},
			</if>
			<if test="userAccount != null">
				user_account = #{userAccount,jdbcType=VARCHAR},
			</if>
			<if test="orderNo != null">
				order_no = #{orderNo,jdbcType=VARCHAR},
			</if>
			<if test="amount != null">
				amount = #{amount,jdbcType=DECIMAL},
			</if>
			<if test="paymentType != null">
				payment_type = #{paymentType,jdbcType=SMALLINT},
			</if>
			<if test="paymentAccount != null">
				payment_account = #{paymentAccount,jdbcType=VARCHAR},
			</if>
			<if test="paymentName != null">
				payment_name = #{paymentName,jdbcType=VARCHAR},
			</if>
			<if test="paymentBank != null">
				payment_bank = #{paymentBank,jdbcType=VARCHAR},
			</if>
			<if test="remarks != null">
				remarks = #{remarks,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.rongyi.easy.tms.entity.PaymentAbnormal">
		update payment_abnormal
		set user_id = #{userId,jdbcType=VARCHAR},
		user_account = #{userAccount,jdbcType=VARCHAR},
		order_no = #{orderNo,jdbcType=VARCHAR},
		status = #{status,jdbcType=SMALLINT},
		is_paid = #{isPaid,jdbcType=BIT},
		amount = #{amount,jdbcType=DECIMAL},
		checked_by = #{checkedBy,jdbcType=VARCHAR},
		check_at = #{checkAt,jdbcType=TIMESTAMP},
		payment_type = #{paymentType,jdbcType=SMALLINT},
		payment_account = #{paymentAccount,jdbcType=VARCHAR},
		payment_name = #{paymentName,jdbcType=VARCHAR},
		payment_bank = #{paymentBank,jdbcType=VARCHAR},
		create_at = #{createAt,jdbcType=TIMESTAMP},
		create_user = #{createUser,jdbcType=VARCHAR},
		is_deleted = #{isDeleted,jdbcType=BIT},
		remarks = #{remarks,jdbcType=VARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.rongyi.easy.tms.entity.PaymentAbnormal">
		update payment_abnormal
		set user_id = #{userId,jdbcType=VARCHAR},
		user_account = #{userAccount,jdbcType=VARCHAR},
		order_no = #{orderNo,jdbcType=VARCHAR},
		status = #{status,jdbcType=SMALLINT},
		is_paid = #{isPaid,jdbcType=BIT},
		amount = #{amount,jdbcType=DECIMAL},
		checked_by = #{checkedBy,jdbcType=VARCHAR},
		check_at = #{checkAt,jdbcType=TIMESTAMP},
		payment_type = #{paymentType,jdbcType=SMALLINT},
		payment_account = #{paymentAccount,jdbcType=VARCHAR},
		payment_name = #{paymentName,jdbcType=VARCHAR},
		payment_bank = #{paymentBank,jdbcType=VARCHAR},
		create_at = #{createAt,jdbcType=TIMESTAMP},
		create_user = #{createUser,jdbcType=VARCHAR},
		is_deleted = #{isDeleted,jdbcType=BIT}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<select id="selectOneById" resultMap="AbnormalVOMap" parameterType="map">
		SELECT <include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" /> 
		FROM payment_abnormal 
		WHERE id=#{id,jdbcType=INTEGER} and is_deleted = 0
	</select>
	<update id="checkAbnormalPayment" parameterType="java.util.Map">
		UPDATE payment_abnormal
		SET	checked_by = #{checkedBy,jdbcType=VARCHAR},
				check_at = #{checkAt,jdbcType=TIMESTAMP},
				status = #{status,jdbcType=SMALLINT},
				remarks = #{remarks,jdbcType=VARCHAR}
		WHERE id IN 		
		<foreach collection="ids" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</update>
	
	<update id="abnormalPaymentPaid" parameterType="java.util.Map">
		UPDATE payment_abnormal
		SET	is_paid = 1
		WHERE  id=#{id,jdbcType=INTEGER}
	</update>
	
	<update id="abnormalPaymentLogicalDelete" parameterType="java.util.Map">
		UPDATE payment_abnormal
		SET	is_deleted = 1
		WHERE  id=#{id,jdbcType=INTEGER}
	</update>
</mapper>

